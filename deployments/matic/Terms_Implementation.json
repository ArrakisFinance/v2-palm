{
  "address": "0x164D8A7B55943ba2170576D890221EB9e3b50405",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2Factory",
          "name": "v2factory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "AddVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "CloseTerm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "DecreaseLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument",
          "type": "uint256"
        }
      ],
      "name": "ExtendingTerm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument",
          "type": "uint256"
        }
      ],
      "name": "IncreaseLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "RemoveVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldEmolument",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newEmolment",
          "type": "uint16"
        }
      ],
      "name": "SetEmolument",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "SetManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IArrakisV2Resolver",
          "name": "oldResolver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IArrakisV2Resolver",
          "name": "newResolver",
          "type": "address"
        }
      ],
      "name": "SetResolver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTermTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTermTreasury",
          "type": "address"
        }
      ],
      "name": "SetTermTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument",
          "type": "uint256"
        }
      ],
      "name": "SetupVault",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint24[]",
          "name": "feeTiers_",
          "type": "uint24[]"
        }
      ],
      "name": "addPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newManager_",
          "type": "address"
        }
      ],
      "name": "closeTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IArrakisV2",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "projectTknIsTknZero",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "internalType": "struct DecreaseBalance",
          "name": "decreaseBalance_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount_",
          "type": "uint256"
        }
      ],
      "name": "decreaseLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emolument",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IArrakisV2",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "projectTknIsTknZero",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExtendingTermData",
          "name": "extensionData_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount_",
          "type": "uint256"
        }
      ],
      "name": "extendingTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IArrakisV2",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "projectTknIsTknZero",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ],
          "internalType": "struct IncreaseBalance",
          "name": "increaseBalance_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount_",
          "type": "uint256"
        }
      ],
      "name": "increaseLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "termTreasury_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "emolument_",
          "type": "uint16"
        },
        {
          "internalType": "contract IArrakisV2Resolver",
          "name": "resolver_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24[]",
              "name": "feeTiers",
              "type": "uint24[]"
            },
            {
              "internalType": "contract IERC20",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "projectTknIsTknZero",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "int24",
              "name": "maxTwapDeviation",
              "type": "int24"
            },
            {
              "internalType": "uint24",
              "name": "twapDuration",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "maxSlippage",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "datas",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "strat",
              "type": "string"
            }
          ],
          "internalType": "struct SetupPayload",
          "name": "setup_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount_",
          "type": "uint256"
        }
      ],
      "name": "openTerm",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "pools_",
          "type": "address[]"
        }
      ],
      "name": "removePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IArrakisV2Resolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "emolument_",
          "type": "uint16"
        }
      ],
      "name": "setEmolument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager_",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "maxSlippage_",
          "type": "uint24"
        }
      ],
      "name": "setMaxSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "maxTwapDeviation_",
          "type": "int24"
        }
      ],
      "name": "setMaxTwapDeviation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2Resolver",
          "name": "resolver_",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "termTreasury_",
          "type": "address"
        }
      ],
      "name": "setTermTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "twapDuration_",
          "type": "uint24"
        }
      ],
      "name": "setTwapDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "setVaultData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "strat_",
          "type": "string"
        }
      ],
      "name": "setVaultStratByName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v2factory",
      "outputs": [
        {
          "internalType": "contract IArrakisV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "withdrawVaultBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8f45bf82cfd0e5887b30f93bd76217f26f0be31154b60ecdfc77906e685a7b6",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x164D8A7B55943ba2170576D890221EB9e3b50405",
    "transactionIndex": 51,
    "gasUsed": "4562878",
    "logsBloom": "0x
    "blockHash": "0x0d5bd2c04d0437bc01a2d35027b6d475346e1fe3342b55fe7169c87ccbf5c6c2",
    "transactionHash": "0xb8f45bf82cfd0e5887b30f93bd76217f26f0be31154b60ecdfc77906e685a7b6",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 32053437,
        "transactionHash": "0xb8f45bf82cfd0e5887b30f93bd76217f26f0be31154b60ecdfc77906e685a7b6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f953c3d475dc0a9877329f71e2ce3d2519a519a2",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000567cd66eda9483000000000000000000000000000000000000000000000000ec2dc237fd822a6c8000000000000000000000000000000000000000000002176237cf68ab357580300000000000000000000000000000000000000000000000ebd745618ea795e9800000000000000000000000000000000000000000000217628e4c3f1a100a033",
        "logIndex": 212,
        "blockHash": "0x0d5bd2c04d0437bc01a2d35027b6d475346e1fe3342b55fe7169c87ccbf5c6c2"
      }
    ],
    "blockNumber": 32053437,
    "cumulativeGasUsed": "13019222",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xFBF23A8ADc3998aF469DADdD9E5BA79b196352ba"],
  "solcInputHash": "06ad119a9b48c817bdb145383f4f9104",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArrakisV2Factory\",\"name\":\"v2factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"AddVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CloseTerm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument\",\"type\":\"uint256\"}],\"name\":\"ExtendingTerm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RemoveVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldEmolument\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newEmolment\",\"type\":\"uint16\"}],\"name\":\"SetEmolument\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"oldResolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"SetResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTermTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTermTreasury\",\"type\":\"address\"}],\"name\":\"SetTermTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument\",\"type\":\"uint256\"}],\"name\":\"SetupVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint24[]\",\"name\":\"feeTiers_\",\"type\":\"uint24[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newManager_\",\"type\":\"address\"}],\"name\":\"closeTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"projectTknIsTknZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct DecreaseBalance\",\"name\":\"decreaseBalance_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emolument\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"projectTknIsTknZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"internalType\":\"struct ExtendingTermData\",\"name\":\"extensionData_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"}],\"name\":\"extendingTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"projectTknIsTknZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"internalType\":\"struct IncreaseBalance\",\"name\":\"increaseBalance_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termTreasury_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"emolument_\",\"type\":\"uint16\"},{\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"resolver_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24[]\",\"name\":\"feeTiers\",\"type\":\"uint24[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"projectTknIsTknZero\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"maxTwapDeviation\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"twapDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"maxSlippage\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"datas\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"strat\",\"type\":\"string\"}],\"internalType\":\"struct SetupPayload\",\"name\":\"setup_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"}],\"name\":\"openTerm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pools_\",\"type\":\"address[]\"}],\"name\":\"removePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"emolument_\",\"type\":\"uint16\"}],\"name\":\"setEmolument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"maxSlippage_\",\"type\":\"uint24\"}],\"name\":\"setMaxSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"maxTwapDeviation_\",\"type\":\"int24\"}],\"name\":\"setMaxTwapDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"resolver_\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"termTreasury_\",\"type\":\"address\"}],\"name\":\"setTermTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"twapDuration_\",\"type\":\"uint24\"}],\"name\":\"setTwapDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"setVaultData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"strat_\",\"type\":\"string\"}],\"name\":\"setVaultStratByName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2factory\",\"outputs\":[{\"internalType\":\"contract IArrakisV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawVaultBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"openTerm((uint24[],address,address,bool,address,int24,uint24,uint24,uint256,uint256,bytes,string),uint256)\":{\"notice\":\"do all neccesary step to initialize market making.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Terms.sol\":\"Terms\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Terms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2Factory} from \\\"./interfaces/IArrakisV2Factory.sol\\\";\\nimport {\\n    IERC20,\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IArrakisV2} from \\\"./interfaces/IArrakisV2.sol\\\";\\nimport {IGasStation} from \\\"./interfaces/IGasStation.sol\\\";\\nimport {TermsStorage} from \\\"./abstracts/TermsStorage.sol\\\";\\nimport {\\n    SetupPayload,\\n    IncreaseBalance,\\n    ExtendingTermData,\\n    DecreaseBalance\\n} from \\\"./structs/STerms.sol\\\";\\nimport {InitializePayload} from \\\"./interfaces/IArrakisV2.sol\\\";\\nimport {\\n    _getInits,\\n    _requireTokenMatch,\\n    _requireIsOwner,\\n    _getEmolument,\\n    _requireProjectAllocationGtZero,\\n    _requireTknOrder,\\n    _burn\\n} from \\\"./functions/FTerms.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract Terms is TermsStorage {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(IArrakisV2Factory v2factory_) TermsStorage(v2factory_) {}\\n\\n    /// @notice do all neccesary step to initialize market making.\\n    // solhint-disable-next-line function-max-lines\\n    function openTerm(SetupPayload calldata setup_, uint256 mintAmount_)\\n        external\\n        override\\n        noLeftOver(setup_.token0, setup_.token1)\\n        returns (address vault)\\n    {\\n        _requireProjectAllocationGtZero(\\n            setup_.projectTknIsTknZero,\\n            setup_.amount0,\\n            setup_.amount1\\n        );\\n        _requireTknOrder(address(setup_.token0), address(setup_.token1));\\n\\n        address me = address(this);\\n\\n        uint256 emolumentAmt = _getEmolument(\\n            setup_.projectTknIsTknZero ? setup_.amount0 : setup_.amount1,\\n            emolument\\n        );\\n\\n        {\\n            (uint256 init0, uint256 init1) = _getInits(\\n                mintAmount_,\\n                setup_.projectTknIsTknZero\\n                    ? setup_.amount0 - emolumentAmt\\n                    : setup_.amount0,\\n                setup_.projectTknIsTknZero\\n                    ? setup_.amount1\\n                    : setup_.amount1 - emolumentAmt\\n            );\\n            // Create vaultV2.\\n            vault = v2factory.deployVault(\\n                InitializePayload({\\n                    feeTiers: setup_.feeTiers,\\n                    token0: address(setup_.token0),\\n                    token1: address(setup_.token1),\\n                    owner: me,\\n                    init0: init0,\\n                    init1: init1,\\n                    manager: manager,\\n                    maxTwapDeviation: setup_.maxTwapDeviation,\\n                    twapDuration: setup_.twapDuration,\\n                    maxSlippage: setup_.maxSlippage\\n                })\\n            );\\n        }\\n\\n        IArrakisV2 vaultV2 = IArrakisV2(vault);\\n\\n        _addVault(setup_.owner, vault);\\n        // Mint vaultV2 token.\\n\\n        // Call the manager to make it manage the new vault.\\n        IGasStation(manager).addVault(vault, setup_.datas, setup_.strat);\\n\\n        // Transfer to termTreasury the project token emolment.\\n        setup_.token0.safeTransferFrom(msg.sender, me, setup_.amount0);\\n        setup_.token1.safeTransferFrom(msg.sender, me, setup_.amount1);\\n\\n        setup_.token0.approve(\\n            vault,\\n            setup_.projectTknIsTknZero\\n                ? setup_.amount0 - emolumentAmt\\n                : setup_.amount0\\n        );\\n        setup_.projectTknIsTknZero\\n            ? setup_.token0.safeTransfer(termTreasury, emolumentAmt)\\n            : setup_.token1.safeTransfer(termTreasury, emolumentAmt);\\n\\n        setup_.token1.approve(\\n            vault,\\n            setup_.projectTknIsTknZero\\n                ? setup_.amount1\\n                : setup_.amount1 - emolumentAmt\\n        );\\n        vaultV2.mint(mintAmount_, me);\\n\\n        IGasStation(manager).toggleRestrictMint(vault);\\n\\n        emit SetupVault(setup_.owner, vault, emolumentAmt);\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function increaseLiquidity(\\n        IncreaseBalance calldata increaseBalance_, // memory instead of calldata to set values\\n        uint256 mintAmount_\\n    )\\n        external\\n        override\\n        noLeftOver(\\n            increaseBalance_.vault.token0(),\\n            increaseBalance_.vault.token1()\\n        )\\n    {\\n        _requireProjectAllocationGtZero(\\n            increaseBalance_.projectTknIsTknZero,\\n            increaseBalance_.amount0,\\n            increaseBalance_.amount1\\n        );\\n        _requireIsOwner(vaults[msg.sender], address(increaseBalance_.vault));\\n\\n        (uint256 amount0, uint256 amount1) = _burn(\\n            increaseBalance_.vault,\\n            address(this),\\n            resolver\\n        );\\n\\n        // Transfer to termTreasury the project token emolment.\\n        increaseBalance_.vault.token0().safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            increaseBalance_.amount0\\n        );\\n        increaseBalance_.vault.token1().safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            increaseBalance_.amount1\\n        );\\n\\n        uint256 emolumentAmt;\\n        uint256 init0;\\n        uint256 init1;\\n        if (increaseBalance_.projectTknIsTknZero) {\\n            emolumentAmt = _getEmolument(increaseBalance_.amount0, emolument);\\n\\n            increaseBalance_.vault.token0().approve(\\n                address(increaseBalance_.vault),\\n                increaseBalance_.amount0 - emolumentAmt + amount0\\n            );\\n\\n            increaseBalance_.vault.token0().safeTransfer(\\n                termTreasury,\\n                emolumentAmt\\n            );\\n\\n            increaseBalance_.vault.token1().approve(\\n                address(increaseBalance_.vault),\\n                increaseBalance_.amount1 + amount1\\n            );\\n\\n            (init0, init1) = _getInits(\\n                mintAmount_,\\n                increaseBalance_.amount0 - emolumentAmt + amount0,\\n                increaseBalance_.amount1 + amount1\\n            );\\n        } else {\\n            emolumentAmt = _getEmolument(increaseBalance_.amount1, emolument);\\n\\n            increaseBalance_.vault.token0().approve(\\n                address(increaseBalance_.vault),\\n                increaseBalance_.amount0 + amount0\\n            );\\n            increaseBalance_.vault.token1().safeTransfer(\\n                termTreasury,\\n                emolumentAmt\\n            );\\n\\n            increaseBalance_.vault.token1().approve(\\n                address(increaseBalance_.vault),\\n                increaseBalance_.amount1 - emolumentAmt + amount1\\n            );\\n\\n            (init0, init1) = _getInits(\\n                mintAmount_,\\n                increaseBalance_.amount0 + amount0,\\n                increaseBalance_.amount1 - emolumentAmt + amount1\\n            );\\n        }\\n\\n        increaseBalance_.vault.setInits(init0, init1);\\n\\n        IGasStation(manager).toggleRestrictMint(\\n            address(increaseBalance_.vault)\\n        );\\n\\n        increaseBalance_.vault.mint(mintAmount_, address(this));\\n\\n        IGasStation(manager).toggleRestrictMint(\\n            address(increaseBalance_.vault)\\n        );\\n\\n        emit IncreaseLiquidity(\\n            msg.sender,\\n            address(increaseBalance_.vault),\\n            emolumentAmt\\n        );\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function extendingTerm(\\n        ExtendingTermData calldata extensionData_,\\n        uint256 mintAmount_\\n    )\\n        external\\n        override\\n        noLeftOver(extensionData_.vault.token0(), extensionData_.vault.token1())\\n    {\\n        _requireProjectAllocationGtZero(\\n            extensionData_.projectTknIsTknZero,\\n            extensionData_.amount0,\\n            extensionData_.amount1\\n        );\\n        _requireIsOwner(vaults[msg.sender], address(extensionData_.vault));\\n        require(\\n            IGasStation(manager)\\n                .getVaultInfo(address(extensionData_.vault))\\n                .endOfMM < block.timestamp, // solhint-disable-line not-rely-on-time\\n            \\\"Terms: terms is active.\\\"\\n        );\\n\\n        (uint256 amount0, uint256 amount1) = _burn(\\n            extensionData_.vault,\\n            address(this),\\n            resolver\\n        );\\n\\n        // Transfer to termTreasury the project token emolment.\\n        extensionData_.vault.token0().safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            extensionData_.amount0\\n        );\\n        extensionData_.vault.token1().safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            extensionData_.amount1\\n        );\\n\\n        uint256 emolumentAmt;\\n        uint256 init0;\\n        uint256 init1;\\n        if (extensionData_.projectTknIsTknZero) {\\n            emolumentAmt = _getEmolument(\\n                extensionData_.amount0 + amount0,\\n                emolument\\n            );\\n\\n            extensionData_.vault.token0().approve(\\n                address(extensionData_.vault),\\n                extensionData_.amount0 - emolumentAmt + amount0\\n            );\\n\\n            extensionData_.vault.token0().safeTransfer(\\n                termTreasury,\\n                emolumentAmt\\n            );\\n\\n            extensionData_.vault.token1().approve(\\n                address(extensionData_.vault),\\n                extensionData_.amount1 + amount1\\n            );\\n\\n            (init0, init1) = _getInits(\\n                mintAmount_,\\n                extensionData_.amount0 - emolumentAmt + amount0,\\n                extensionData_.amount1 + amount1\\n            );\\n        } else {\\n            emolumentAmt = _getEmolument(\\n                extensionData_.amount1 + amount1,\\n                emolument\\n            );\\n\\n            extensionData_.vault.token0().approve(\\n                address(extensionData_.vault),\\n                extensionData_.amount0 + amount0\\n            );\\n            extensionData_.vault.token1().safeTransfer(\\n                termTreasury,\\n                emolumentAmt\\n            );\\n\\n            extensionData_.vault.token1().approve(\\n                address(extensionData_.vault),\\n                extensionData_.amount1 - emolumentAmt + amount1\\n            );\\n\\n            (init0, init1) = _getInits(\\n                mintAmount_,\\n                extensionData_.amount0 + amount0,\\n                extensionData_.amount1 - emolumentAmt + amount1\\n            );\\n        }\\n\\n        extensionData_.vault.setInits(init0, init1);\\n\\n        IGasStation(manager).toggleRestrictMint(\\n            address(extensionData_.vault)\\n        );\\n\\n        extensionData_.vault.mint(mintAmount_, address(this));\\n\\n        IGasStation(manager).toggleRestrictMint(\\n            address(extensionData_.vault)\\n        );\\n\\n        IGasStation(manager).expandMMTermDuration(\\n            address(extensionData_.vault)\\n        );\\n\\n        emit ExtendingTerm(\\n            msg.sender,\\n            address(extensionData_.vault),\\n            emolumentAmt\\n        );\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function decreaseLiquidity(\\n        DecreaseBalance calldata decreaseBalance_,\\n        uint256 mintAmount_\\n    )\\n        external\\n        override\\n        noLeftOver(\\n            decreaseBalance_.vault.token0(),\\n            decreaseBalance_.vault.token1()\\n        )\\n    {\\n        IERC20 token0 = decreaseBalance_.vault.token0();\\n        IERC20 token1 = decreaseBalance_.vault.token1();\\n        _requireIsOwner(vaults[msg.sender], address(decreaseBalance_.vault));\\n        address me = address(this);\\n        (uint256 amount0, uint256 amount1) = _burn(\\n            decreaseBalance_.vault,\\n            me,\\n            resolver\\n        );\\n        require(\\n            decreaseBalance_.amount0 < amount0,\\n            \\\"Terms: send back amount0 > amount0\\\"\\n        );\\n        require(\\n            decreaseBalance_.amount1 < amount1,\\n            \\\"Terms: send back amount1 > amount1\\\"\\n        );\\n        token0.safeTransfer(decreaseBalance_.to, decreaseBalance_.amount0);\\n        token1.safeTransfer(decreaseBalance_.to, decreaseBalance_.amount1);\\n        token0.approve(\\n            address(decreaseBalance_.vault),\\n            amount0 - decreaseBalance_.amount0\\n        );\\n        token1.approve(\\n            address(decreaseBalance_.vault),\\n            amount1 - decreaseBalance_.amount1\\n        );\\n        (uint256 init0, uint256 init1) = _getInits(\\n            mintAmount_,\\n            amount0 - decreaseBalance_.amount0,\\n            amount1 - decreaseBalance_.amount1\\n        );\\n        decreaseBalance_.vault.setInits(init0, init1);\\n\\n        IGasStation(manager).toggleRestrictMint(\\n            address(decreaseBalance_.vault)\\n        );\\n\\n        decreaseBalance_.vault.mint(mintAmount_, me);\\n\\n        IGasStation(manager).toggleRestrictMint(\\n            address(decreaseBalance_.vault)\\n        );\\n\\n        emit DecreaseLiquidity(msg.sender, address(decreaseBalance_.vault));\\n    }\\n\\n    function closeTerm(\\n        IArrakisV2 vault_,\\n        address to_,\\n        address newOwner_,\\n        address newManager_\\n    )\\n        external\\n        override\\n        requireAddressNotZero(newOwner_)\\n        requireAddressNotZero(to_)\\n    {\\n        uint256 index = _requireIsOwner(vaults[msg.sender], address(vault_));\\n        address vaultAddr = address(vault_);\\n\\n        delete vaults[msg.sender][index];\\n\\n        (uint256 amount0, uint256 amount1) = _burn(\\n            vault_,\\n            address(this),\\n            resolver\\n        );\\n\\n        if (amount0 > 0) vault_.token0().safeTransfer(to_, amount0);\\n        if (amount1 > 0) vault_.token1().safeTransfer(to_, amount1);\\n\\n        IGasStation(manager).removeVault(address(vault_), payable(to_));\\n        vault_.setManager(IGasStation(newManager_));\\n        vault_.transferOwnership(newOwner_);\\n\\n        emit CloseTerm(msg.sender, vaultAddr, amount0, amount1, to_);\\n    }\\n\\n    // #region vault config as admin.\\n\\n    function addPools(IArrakisV2 vault_, uint24[] calldata feeTiers_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        vault_.addPools(feeTiers_);\\n    }\\n\\n    function removePools(IArrakisV2 vault_, address[] calldata pools_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        vault_.removePools(pools_);\\n    }\\n\\n    function setMaxTwapDeviation(IArrakisV2 vault_, int24 maxTwapDeviation_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        vault_.setMaxTwapDeviation(maxTwapDeviation_);\\n    }\\n\\n    function setTwapDuration(IArrakisV2 vault_, uint24 twapDuration_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        vault_.setTwapDuration(twapDuration_);\\n    }\\n\\n    function setMaxSlippage(IArrakisV2 vault_, uint24 maxSlippage_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        vault_.setMaxSlippage(maxSlippage_);\\n    }\\n\\n    // #endregion vault config as admin.\\n\\n    // #region gasStation config as vault owner.\\n\\n    function setVaultData(address vault_, bytes calldata data_)\\n        external\\n        override\\n        requireAddressNotZero(vault_)\\n    {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        IGasStation(manager).setVaultData(vault_, data_);\\n    }\\n\\n    function setVaultStratByName(address vault_, string calldata strat_)\\n        external\\n        override\\n        requireAddressNotZero(vault_)\\n    {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        IGasStation(manager).setVaultStraByName(vault_, strat_);\\n    }\\n\\n    function withdrawVaultBalance(\\n        address vault_,\\n        uint256 amount_,\\n        address payable to_\\n    ) external override requireAddressNotZero(vault_) {\\n        _requireIsOwner(vaults[msg.sender], address(vault_));\\n        IGasStation(manager).withdrawVaultBalance(vault_, amount_, to_);\\n    }\\n\\n    // #endregion gasStation config as vault owner.\\n}\\n\",\"keccak256\":\"0x9a8d7a2e3c6cba9067a8a4ad4116be5519660b774c105d15deae2e9fd5790a82\",\"license\":\"MIT\"},\"contracts/abstracts/OwnableUninitialized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// solhint-disable ordering\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n\\nabstract contract OwnableUninitialized {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @dev CONSTRUCTOR EMPTY - USE INITIALIZIABLE INSTEAD to set the initial owner\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() {}\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x48fb6caba7b07d5083b992db169cf1981fdfb89afd30f3a59127d914e246d70d\",\"license\":\"MIT\"},\"contracts/abstracts/TermsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {ITerms} from \\\"../interfaces/ITerms.sol\\\";\\nimport {IArrakisV2Factory} from \\\"../interfaces/IArrakisV2Factory.sol\\\";\\nimport {IArrakisV2Resolver} from \\\"../interfaces/IArrakisV2Resolver.sol\\\";\\nimport {IArrakisV2} from \\\"../interfaces/IArrakisV2.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {OwnableUninitialized} from \\\"./OwnableUninitialized.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {FullMath} from \\\"../utils/FullMath.sol\\\";\\n\\n// solhint-disable-next-line max-states-count\\nabstract contract TermsStorage is\\n    ITerms,\\n    OwnableUninitialized,\\n    ReentrancyGuardUpgradeable\\n{\\n    IArrakisV2Factory public immutable v2factory;\\n    mapping(address => address[]) public vaults;\\n    address public termTreasury;\\n    address public manager;\\n    uint16 public emolument;\\n    IArrakisV2Resolver public resolver;\\n\\n    // #region no left over.\\n\\n    modifier noLeftOver(IERC20 token0_, IERC20 token1_) {\\n        uint256 token0Balance = token0_.balanceOf(address(this));\\n        uint256 token1Balance = token1_.balanceOf(address(this));\\n        _;\\n        uint256 leftOver0 = token0_.balanceOf(address(this)) - token0Balance;\\n        uint256 leftOver1 = token1_.balanceOf(address(this)) - token1Balance;\\n        if (leftOver0 > 0) token0_.transfer(msg.sender, leftOver0);\\n        if (leftOver1 > 0) token1_.transfer(msg.sender, leftOver1);\\n    }\\n\\n    modifier requireAddressNotZero(address addr) {\\n        require(addr != address(0), \\\"Terms: address Zero\\\");\\n        _;\\n    }\\n\\n    // #endregion no left over.\\n\\n    constructor(IArrakisV2Factory v2factory_) {\\n        v2factory = v2factory_;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address termTreasury_,\\n        uint16 emolument_,\\n        IArrakisV2Resolver resolver_\\n    ) external {\\n        require(emolument < 10000, \\\"Terms: emolument >= 100%.\\\");\\n        _owner = owner_;\\n        termTreasury = termTreasury_;\\n        emolument = emolument_;\\n        resolver = resolver_;\\n    }\\n\\n    // #region setter.\\n\\n    function setEmolument(uint16 emolument_) external onlyOwner {\\n        require(\\n            emolument_ < emolument,\\n            \\\"Terms: new emolument >= old emolument\\\"\\n        );\\n        emit SetEmolument(emolument, emolument = emolument_);\\n    }\\n\\n    function setTermTreasury(address termTreasury_)\\n        external\\n        onlyOwner\\n        requireAddressNotZero(termTreasury_)\\n    {\\n        emit SetTermTreasury(termTreasury, termTreasury = termTreasury_);\\n    }\\n\\n    function setResolver(IArrakisV2Resolver resolver_)\\n        external\\n        onlyOwner\\n        requireAddressNotZero(address(resolver_))\\n    {\\n        emit SetResolver(resolver, resolver = resolver_);\\n    }\\n\\n    function setManager(address manager_)\\n        external\\n        override\\n        onlyOwner\\n        requireAddressNotZero(manager_)\\n    {\\n        emit SetManager(manager, manager = manager_);\\n    }\\n\\n    // #endregion setter.\\n\\n    // #region internals setter.\\n\\n    function _addVault(address creator_, address vault_) internal {\\n        address[] storage vaultsOfCreator = vaults[creator_];\\n\\n        for (uint256 i = 0; i < vaultsOfCreator.length; i++) {\\n            require(vaultsOfCreator[i] != vault_, \\\"Terms: vault exist\\\");\\n        }\\n\\n        vaultsOfCreator.push(vault_);\\n        emit AddVault(creator_, vault_);\\n    }\\n\\n    function _removeVault(address creator_, address vault_) internal {\\n        address[] storage vaultsOfCreator = vaults[creator_];\\n\\n        for (uint256 i = 0; i < vaultsOfCreator.length; i++) {\\n            if (vaultsOfCreator[i] == vault_) {\\n                delete vaultsOfCreator[i];\\n                emit RemoveVault(creator_, vault_);\\n                return;\\n            }\\n        }\\n\\n        revert(\\\"Terms: vault don't exist\\\");\\n    }\\n\\n    // #endregion internals setter.\\n}\\n\",\"keccak256\":\"0x4c2f09d7ab54a2d7c29f096e174a7d981aee2815216c6879d36d3f666167593c\",\"license\":\"MIT\"},\"contracts/functions/FTerms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2, BurnLiquidity} from \\\"../interfaces/IArrakisV2.sol\\\";\\nimport {IArrakisV2Resolver} from \\\"../interfaces/IArrakisV2Resolver.sol\\\";\\nimport {ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {FullMath} from \\\"../utils/FullMath.sol\\\";\\n\\nfunction _burn(\\n    IArrakisV2 vault_,\\n    address me,\\n    IArrakisV2Resolver resolver\\n) returns (uint256 amount0, uint256 amount1) {\\n    uint256 balanceOfArrakisTkn = IERC20(address(vault_)).balanceOf(me);\\n\\n    BurnLiquidity[] memory burnPayload = resolver.standardBurnParams(\\n        balanceOfArrakisTkn,\\n        vault_\\n    );\\n\\n    (amount0, amount1) = vault_.burn(burnPayload, balanceOfArrakisTkn, me);\\n}\\n\\nfunction _getInits(\\n    uint256 mintAmount_,\\n    uint256 amount0_,\\n    uint256 amount1_\\n) pure returns (uint256 init0, uint256 init1) {\\n    init0 = FullMath.mulDiv(amount0_, 1e18, mintAmount_);\\n    init1 = FullMath.mulDiv(amount1_, 1e18, mintAmount_);\\n}\\n\\nfunction _requireTokenMatch(\\n    IArrakisV2 vault_,\\n    IERC20 token0_,\\n    IERC20 token1_\\n) view {\\n    require(\\n        address(token0_) == address(vault_.token0()),\\n        \\\"Terms: wrong token0.\\\"\\n    );\\n    require(\\n        address(token1_) == address(vault_.token1()),\\n        \\\"Terms: wrong token1.\\\"\\n    );\\n}\\n\\nfunction _requireIsOwner(address[] memory vaults_, address vault_)\\n    pure\\n    returns (uint256 index)\\n{\\n    bool isOwner;\\n    (isOwner, index) = _isOwnerOfVault(vaults_, address(vault_));\\n    require(isOwner, \\\"Terms: not owner\\\");\\n}\\n\\nfunction _isOwnerOfVault(address[] memory vaults_, address vault_)\\n    pure\\n    returns (bool, uint256 index)\\n{\\n    for (index = 0; index < vaults_.length; index++) {\\n        if (vaults_[index] == vault_) return (true, index);\\n    }\\n    return (false, 0);\\n}\\n\\nfunction _getEmolument(uint256 projectTokenAllocation_, uint16 emolument_)\\n    pure\\n    returns (uint256)\\n{\\n    return (projectTokenAllocation_ * emolument_) / 10000;\\n}\\n\\nfunction _requireProjectAllocationGtZero(\\n    bool projectTknIsTknZero_,\\n    uint256 amount0_,\\n    uint256 amount1_\\n) pure {\\n    require(\\n        projectTknIsTknZero_ ? amount0_ > 0 : amount1_ > 0,\\n        \\\"Terms: no project token allocation.\\\"\\n    );\\n}\\n\\nfunction _requireTknOrder(address token0_, address token1_) pure {\\n    require(token0_ < token1_, \\\"Terms: tokens order inverted.\\\");\\n}\\n\",\"keccak256\":\"0x014bfe3284ba4d76a75899a81ca3e83a13d396c8bc6d32ad3eb4ecec94b74243\",\"license\":\"MIT\"},\"contracts/interfaces/IArrakisV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {\\n    IUniswapV3Factory\\n} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IGasStation} from \\\"./IGasStation.sol\\\";\\n\\n// structs copied from v2-core/contracts/structs/SVaultV2.sol\\nstruct PositionLiquidity {\\n    uint128 liquidity;\\n    Range range;\\n}\\n\\nstruct SwapPayload {\\n    bytes payload;\\n    address pool;\\n    address router;\\n    uint256 amountIn;\\n    uint256 expectedMinReturn;\\n    bool zeroForOne;\\n}\\n\\nstruct Range {\\n    int24 lowerTick;\\n    int24 upperTick;\\n    uint24 feeTier;\\n}\\n\\nstruct Rebalance {\\n    PositionLiquidity[] removes;\\n    PositionLiquidity[] deposits;\\n    SwapPayload swap;\\n}\\n\\nstruct InitializePayload {\\n    uint24[] feeTiers;\\n    address token0;\\n    address token1;\\n    address owner;\\n    uint256 init0;\\n    uint256 init1;\\n    address manager;\\n    int24 maxTwapDeviation;\\n    uint24 twapDuration;\\n    uint24 maxSlippage;\\n}\\n\\nstruct BurnLiquidity {\\n    uint128 liquidity;\\n    Range range;\\n}\\n\\ninterface IArrakisV2 {\\n    function mint(uint256 mintAmount_, address receiver_)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function rebalance(\\n        Range[] calldata ranges_,\\n        Rebalance calldata rebalanceParams_,\\n        Range[] calldata rangesToRemove_\\n    ) external;\\n\\n    function burn(\\n        BurnLiquidity[] calldata burns_,\\n        uint256 burnAmount_,\\n        address receiver_\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function addOperators(address[] calldata operators_) external;\\n\\n    function toggleRestrictMint() external;\\n\\n    function setInits(uint256 init0_, uint256 init1_) external;\\n\\n    function addPools(uint24[] calldata feeTiers_) external;\\n\\n    function removePools(address[] calldata pools_) external;\\n\\n    function setManager(IGasStation manager_) external;\\n\\n    function setMaxTwapDeviation(int24 maxTwapDeviation_) external;\\n\\n    function setTwapDuration(uint24 twapDuration_) external;\\n\\n    function setMaxSlippage(uint24 maxSlippage_) external;\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function rangeExist(Range calldata range_)\\n        external\\n        view\\n        returns (bool ok, uint256 index);\\n\\n    function rangesArray() external view returns (Range[] memory);\\n\\n    function owner() external view returns (address);\\n\\n    function manager() external view returns (IGasStation);\\n}\\n\",\"keccak256\":\"0x98814b76aaaa2ec2e840dfb7eea661d283ca59c8abb6d2e388d1a7186814b885\",\"license\":\"MIT\"},\"contracts/interfaces/IArrakisV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {InitializePayload} from \\\"./IArrakisV2.sol\\\";\\n\\ninterface IArrakisV2Factory {\\n    event VaultCreated(address indexed manager, address indexed vault);\\n\\n    event InitFactory(address implementation);\\n\\n    event UpdateVaultImplementation(\\n        address previousImplementation,\\n        address newImplementation\\n    );\\n\\n    function deployVault(InitializePayload calldata params_)\\n        external\\n        returns (address vault);\\n\\n    // #region view functions\\n\\n    function version() external view returns (string memory);\\n\\n    function vaultImplementation() external view returns (address);\\n\\n    function deployer() external view returns (address);\\n\\n    function index() external view returns (uint256);\\n\\n    function numVaultsByDeployer(address deployer_)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getVaultsByDeployer(address deployer_)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    // #endregion view functions\\n}\\n\",\"keccak256\":\"0x2f027fbd628b02d4fb981cb2244c4d1c358b3ed0ec5de1130ee4d9074c89c397\",\"license\":\"MIT\"},\"contracts/interfaces/IArrakisV2Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2, Rebalance, Range, BurnLiquidity} from \\\"./IArrakisV2.sol\\\";\\n\\n// structs copied from v2-core/contracts/structs/SVaultV2.sol\\nstruct RangeWeight {\\n    Range range;\\n    uint256 weight; // should be between 0 and 100%\\n}\\n\\ninterface IArrakisV2Resolver {\\n    function standardRebalance(\\n        RangeWeight[] memory rangeWeights_,\\n        IArrakisV2 vaultV2_\\n    ) external view returns (Rebalance memory rebalanceParams);\\n\\n    function standardBurnParams(uint256 amountToBurn_, IArrakisV2 vaultV2_)\\n        external\\n        view\\n        returns (BurnLiquidity[] memory burns);\\n\\n    function getMintAmounts(\\n        IArrakisV2 vaultV2_,\\n        uint256 amount0Max_,\\n        uint256 amount1Max_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 mintAmount\\n        );\\n}\\n\",\"keccak256\":\"0x4dc40064e23d7a8e547cd3aa3d48b5e93ac8338a416085dd6b6da2f915df2259\",\"license\":\"MIT\"},\"contracts/interfaces/IGasStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {Rebalance, Range} from \\\"./IArrakisV2.sol\\\";\\nimport {IManagerProxy} from \\\"./IManagerProxy.sol\\\";\\nimport {VaultInfo} from \\\"../structs/SGasStation.sol\\\";\\n\\ninterface IGasStation is IManagerProxy {\\n    event AddVault(address indexed vault, bytes datas, string strat);\\n\\n    event RemoveVault(address indexed vault, uint256 sendBack);\\n\\n    event SetVaultData(address indexed vault, bytes data);\\n\\n    event SetVaultStrat(address indexed vault, bytes32 strat);\\n\\n    event WhitelistStrat(address indexed gasStation, string strat);\\n\\n    event AddOperators(address indexed gasStation, address[] operators);\\n\\n    event RemoveOperators(address indexed gasStation, address[] operators);\\n\\n    event UpdateVaultBalance(address indexed vault, uint256 newBalance);\\n\\n    event ExpandTermDuration(\\n        address indexed vault,\\n        uint256 oldMmTermDuration,\\n        uint256 newMmTermDuration\\n    );\\n\\n    event ToggleRestrictMint(address indexed vault);\\n\\n    event WithdrawVaultBalance(\\n        address indexed vault,\\n        uint256 amount,\\n        address to,\\n        uint256 newBalance\\n    );\\n\\n    event RebalanceVault(address indexed vault, uint256 newBalance);\\n\\n    // ======== GELATOFIED FUNCTIONS ========\\n    function rebalance(\\n        address vault_,\\n        Range[] calldata ranges_,\\n        Rebalance calldata rebalanceParams_,\\n        Range[] calldata rangesToRemove_,\\n        uint256 feeAmount_\\n    ) external;\\n\\n    // ======= PERMISSIONED OWNER FUNCTIONS =====\\n    function withdrawVaultBalance(\\n        address vault_,\\n        uint256 amount_,\\n        address payable to_\\n    ) external;\\n\\n    function addVault(\\n        address vault_,\\n        bytes calldata datas_,\\n        string calldata strat_\\n    ) external payable;\\n\\n    function removeVault(address vault_, address payable to_) external;\\n\\n    function setVaultData(address vault_, bytes calldata data_) external;\\n\\n    function setVaultStraByName(address vault_, string calldata strat_)\\n        external;\\n\\n    function addOperators(address[] calldata operators_) external;\\n\\n    function removeOperators(address[] calldata operators_) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ======= PUBLIC FUNCTIONS =====\\n\\n    function fundVaultBalance(address vault_) external payable;\\n\\n    function expandMMTermDuration(address vault_) external;\\n\\n    function toggleRestrictMint(address vault_) external;\\n\\n    function getVaultInfo(address vault_)\\n        external\\n        view\\n        returns (VaultInfo memory);\\n\\n    function managerFeeBPS() external view returns (uint16);\\n\\n    function getWhitelistedStrat() external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xf803554b4f3892d9ca89c1042ff6b8db6c889eeaf6a7d17c90c42c1b54005b62\",\"license\":\"MIT\"},\"contracts/interfaces/IManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IManagerProxy {\\n    // ======= EXTERNAL FUNCTIONS =======\\n    function fundVaultBalance(address vault) external payable;\\n}\\n\",\"keccak256\":\"0x3a8ee8ef2c3e9542bd09e424c72a7910085085a31c257b884ba7c59d162144d3\",\"license\":\"MIT\"},\"contracts/interfaces/ITerms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2Factory} from \\\"./IArrakisV2Factory.sol\\\";\\nimport {IArrakisV2Resolver} from \\\"./IArrakisV2Resolver.sol\\\";\\nimport {IArrakisV2} from \\\"./IArrakisV2.sol\\\";\\nimport {IGasStation} from \\\"./IGasStation.sol\\\";\\nimport {\\n    SetupPayload,\\n    IncreaseBalance,\\n    ExtendingTermData,\\n    DecreaseBalance\\n} from \\\"../structs/STerms.sol\\\";\\n\\ninterface ITerms {\\n    // #region events.\\n    event SetEmolument(uint16 oldEmolument, uint16 newEmolment);\\n    event SetTermTreasury(address oldTermTreasury, address newTermTreasury);\\n    event SetManager(address oldManager, address newManager);\\n    event SetResolver(\\n        IArrakisV2Resolver oldResolver,\\n        IArrakisV2Resolver newResolver\\n    );\\n\\n    event AddVault(address creator, address vault);\\n    event RemoveVault(address creator, address vault);\\n\\n    event SetupVault(address creator, address vault, uint256 emolument);\\n    event IncreaseLiquidity(address creator, address vault, uint256 emolument);\\n    event ExtendingTerm(address creator, address vault, uint256 emolument);\\n    event DecreaseLiquidity(address creator, address vault);\\n    event CloseTerm(\\n        address creator,\\n        address vault,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address to\\n    );\\n\\n    // #endregion events.\\n\\n    function openTerm(SetupPayload calldata setup_, uint256 mintAmount_)\\n        external\\n        returns (address vault);\\n\\n    function increaseLiquidity(\\n        IncreaseBalance calldata increaseBalance_,\\n        uint256 mintAmount_\\n    ) external;\\n\\n    function extendingTerm(\\n        ExtendingTermData calldata extensionData_,\\n        uint256 mintAmount_\\n    ) external;\\n\\n    function decreaseLiquidity(\\n        DecreaseBalance calldata decreaseBalance_,\\n        uint256 mintAmount_\\n    ) external;\\n\\n    function closeTerm(\\n        IArrakisV2 vault_,\\n        address to_,\\n        address newOwner_,\\n        address newManager_\\n    ) external;\\n\\n    // #region Vault configuration functions.\\n\\n    function addPools(IArrakisV2 vault_, uint24[] calldata feeTiers_) external;\\n\\n    function removePools(IArrakisV2 vault_, address[] calldata pools_) external;\\n\\n    function setMaxTwapDeviation(IArrakisV2 vault_, int24 maxTwapDeviation_)\\n        external;\\n\\n    function setTwapDuration(IArrakisV2 vault_, uint24 twapDuration_) external;\\n\\n    function setMaxSlippage(IArrakisV2 vault_, uint24 maxSlippage_) external;\\n\\n    // #endregion Vault configuration functions.\\n\\n    // #region GasStation configuration functions.\\n\\n    function setVaultData(address vault_, bytes calldata data_) external;\\n\\n    function setVaultStratByName(address vault_, string calldata strat_)\\n        external;\\n\\n    function withdrawVaultBalance(\\n        address vault_,\\n        uint256 amount_,\\n        address payable to_\\n    ) external;\\n\\n    function setManager(address manager_) external;\\n\\n    // #endregion GasStation configuration functions.\\n\\n    function v2factory() external view returns (IArrakisV2Factory);\\n\\n    function termTreasury() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function emolument() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xa170da81be112e6511c0b103b35a7adea4340795a83b83c3bd14d8dc848600f8\",\"license\":\"MIT\"},\"contracts/structs/SGasStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct VaultInfo {\\n    uint256 balance; // prepaid credit for rebalance\\n    uint256 lastRebalance; // timestamp of the last rebalance\\n    bytes datas; // custom bytes that can used to store data needed for rebalance.\\n    bytes32 strat; // strat type\\n    uint256 endOfMM; // expiry of the Market Making terms.\\n}\\n\",\"keccak256\":\"0x224a5f96ace55d1ad2f978110a8ea1afd0de8d6ab889c142cda8c81f0a489261\",\"license\":\"MIT\"},\"contracts/structs/STerms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2} from \\\"../interfaces/IArrakisV2.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct SetupPayload {\\n    // Initialized Payload properties\\n    uint24[] feeTiers;\\n    IERC20 token0;\\n    IERC20 token1;\\n    bool projectTknIsTknZero;\\n    address owner;\\n    int24 maxTwapDeviation;\\n    uint24 twapDuration;\\n    uint24 maxSlippage;\\n    uint256 amount0;\\n    uint256 amount1;\\n    bytes datas;\\n    string strat;\\n}\\n\\nstruct IncreaseBalance {\\n    IArrakisV2 vault;\\n    bool projectTknIsTknZero;\\n    uint256 amount0;\\n    uint256 amount1;\\n}\\n\\nstruct ExtendingTermData {\\n    IArrakisV2 vault;\\n    bool projectTknIsTknZero;\\n    uint256 amount0;\\n    uint256 amount1;\\n}\\n\\nstruct DecreaseBalance {\\n    IArrakisV2 vault;\\n    bool projectTknIsTknZero;\\n    uint256 amount0;\\n    uint256 amount1;\\n    address to;\\n}\\n\",\"keccak256\":\"0x9aadfd5628f9dc516d00a28531228decd3675bb3e032af9ca66a75975929c3f8\",\"license\":\"MIT\"},\"contracts/utils/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2fadcdd63f32a2d38eed9f177a48ba6bbdac45a04ca27e6c897250ed5e759a52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200522738038062005227833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b60805161518c6200009b6000396000818161022001526117ea015261518c6000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80637407e38c116100f9578063bd324d3211610097578063ea6b186c11610071578063ea6b186c1461039e578063eaaa9299146103b1578063f2cb118a146103c4578063f2fde38b146103d757600080fd5b8063bd324d3214610365578063bfd7e75214610378578063d0ebdbe71461038b57600080fd5b80638da5cb5b116100d35780638da5cb5b1461031b578063ae5e24c21461032c578063b1ffa5821461033f578063b33d46dc1461035257600080fd5b80637407e38c146102e25780637bbfc69e146102f557806386de14671461030857600080fd5b80634e543b261161016657806357dc1d6a1161014057806357dc1d6a146102a157806368b6702e146102b45780636f22cf97146102c7578063715018a6146102da57600080fd5b80634e543b261461026857806351a6deba1461027b57806356ee72be1461028e57600080fd5b806304f3bcec146101ae578063233fc650146101de57806326c1a7b1146101f3578063330807a91461021b5780633a91f42a14610242578063481c6a7514610255575b600080fd5b6036546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f16101ec366004614500565b6103ea565b005b60355461020890600160a01b900461ffff1681565b60405161ffff90911681526020016101d5565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b6101f1610250366004614584565b611280565b6035546101c1906001600160a01b031681565b6101f16102763660046145d8565b611377565b6101f1610289366004614604565b611436565b6101f161029c36600461464e565b61152e565b6101c16102af36600461467c565b6115f2565b6101f16102c23660046146c6565b611f65565b6101f16102d5366004614722565b61228f565b6101f1612ac1565b6101f16102f0366004614584565b612b44565b6101c1610303366004614753565b612c0b565b6101f1610316366004614771565b612c43565b6000546001600160a01b03166101c1565b6101f161033a3660046147f7565b612d17565b6101f161034d366004614855565b612dd8565b6101f1610360366004614894565b612e97565b6101f161037336600461464e565b612f9d565b6101f16103863660046145d8565b613061565b6101f16103993660046145d8565b613118565b6034546101c1906001600160a01b031681565b6101f16103bf3660046147f7565b6131cf565b6101f16103d2366004614500565b613290565b6101f16103e53660046145d8565b613bf1565b6103f760208301836145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906148af565b61046560208401846145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c691906148af565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053191906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906148cc565b90506105c36105b460408801602089016148f3565b87604001358860600135613cea565b33600090815260336020908152604091829020805483518184028101840190945280845261063e939283018282801561062557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610607575b506106399350505060208a019050896145d8565b613d5a565b5060355442906001600160a01b03166390229af761065f60208a018a6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381865afa1580156106a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106cb91908101906149ee565b60800151106107215760405162461bcd60e51b815260206004820152601760248201527f5465726d733a207465726d73206973206163746976652e00000000000000000060448201526064015b60405180910390fd5b60008061074761073460208a018a6145d8565b60365430906001600160a01b0316613db2565b90925090506107d5333060408b013561076360208d018d6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c491906148af565b6001600160a01b0316929190613f22565b610829333060608b01356107ec60208d018d6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a0573d6000803e3d6000fd5b6000808061083d60408c0160208d016148f3565b15610b34576108666108538660408e0135614aeb565b603554600160a01b900461ffff16613f93565b925061087560208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d691906148af565b6001600160a01b031663095ea7b36108f160208e018e6145d8565b87868f604001356109029190614b03565b61090c9190614aeb565b6040518363ffffffff1660e01b8152600401610929929190614b1a565b6020604051808303816000875af1158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190614b33565b506034546109fc906001600160a01b03168461098b60208f018f6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec91906148af565b6001600160a01b03169190613fb7565b610a0960208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a91906148af565b6001600160a01b031663095ea7b3610a8560208e018e6145d8565b868e60600135610a959190614aeb565b6040518363ffffffff1660e01b8152600401610ab2929190614b1a565b6020604051808303816000875af1158015610ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af59190614b33565b50610b2a8a86858e60400135610b0b9190614b03565b610b159190614aeb565b868e60600135610b259190614aeb565b613fd6565b9092509050610dd4565b610b456108538560608e0135614aeb565b9250610b5460208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb591906148af565b6001600160a01b031663095ea7b3610bd060208e018e6145d8565b878e60400135610be09190614aeb565b6040518363ffffffff1660e01b8152600401610bfd929190614b1a565b6020604051808303816000875af1158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190614b33565b50603454610c9c906001600160a01b031684610c5f60208f018f6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b610ca960208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a91906148af565b6001600160a01b031663095ea7b3610d2560208e018e6145d8565b86868f60600135610d369190614b03565b610d409190614aeb565b6040518363ffffffff1660e01b8152600401610d5d929190614b1a565b6020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da09190614b33565b50610dce8a610db38760408f0135614aeb565b86868f60600135610dc49190614b03565b610b259190614aeb565b90925090505b610de160208c018c6145d8565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b158015610e2c57600080fd5b505af1158015610e40573d6000803e3d6000fd5b50506035546001600160a01b03169150635c1c3fe19050610e6460208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015610ea557600080fd5b505af1158015610eb9573d6000803e3d6000fd5b50610ecb9250505060208c018c6145d8565b6040516394bf804d60e01b8152600481018c90523060248201526001600160a01b0391909116906394bf804d9060440160408051808303816000875af1158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d9190614b50565b50506035546001600160a01b0316635c1c3fe1610f5d60208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b50506035546001600160a01b03169150636f2cbdf09050610fd660208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b507fc6c23c4bbbc3cb7b831379a165ad09a48801176ff5e9a73213986a3db573d1f39250339150611061905060208e018e6145d8565b604080516001600160a01b039384168152929091166020830152810185905260600160405180910390a150506040516370a0823160e01b8152306004820152600093508592506001600160a01b03881691506370a08231906024015b602060405180830381865afa1580156110da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fe91906148cc565b6111089190614b03565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117891906148cc565b6111829190614b03565b905081156111fd5760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906111b89033908690600401614b1a565b6020604051808303816000875af11580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb9190614b33565b505b80156112765760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb906112319033908590600401614b1a565b6020604051808303816000875af1158015611250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112749190614b33565b505b5050505050505050565b826001600160a01b0381166112a75760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452611314939283018282801561130957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112eb575b505050505085613d5a565b5060355460405163152f2bb760e01b81526001600160a01b039091169063152f2bb79061134990879087908790600401614bca565b600060405180830381600087803b15801561136357600080fd5b505af1158015611276573d6000803e3d6000fd5b3361138a6000546001600160a01b031690565b6001600160a01b0316146113b05760405162461bcd60e51b815260040161071890614bf8565b806001600160a01b0381166113d75760405162461bcd60e51b815260040161071890614b74565b603680546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f6cb59c795917577ec693948e42535bd42e4c7784893c9fff6d7b7102f64a1d7291015b60405180910390a15050565b816001600160a01b03811661145d5760405162461bcd60e51b815260040161071890614b74565b3360009081526033602090815260409182902080548351818402810184019094528084526114ca93928301828280156114bf57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114a1575b505050505084613d5a565b50604051631e5ff9ff60e11b8152600283900b60048201526001600160a01b03841690633cbff3fe906024015b600060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b50505050505050565b816001600160a01b0381166115555760405162461bcd60e51b815260040161071890614b74565b3360009081526033602090815260409182902080548351818402810184019094528084526115c093928301828280156114bf576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116114a157505050505084613d5a565b5060405163138e02ad60e21b815262ffffff831660048201526001600160a01b03841690634e380ab4906024016114f7565b600061160460408401602085016145d8565b61161460608501604086016145d8565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561165b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167f91906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed91906148cc565b90506117136117026080890160608a016148f3565b886101000135896101200135613cea565b61173b6117266040890160208a016145d8565b61173660608a0160408b016145d8565b61400b565b30600061177a61175160808b0160608c016148f3565b61176057896101200135610853565b89610100013560355461ffff600160a01b90910416613f93565b90506000806117e48a61179360808e0160608f016148f3565b6117a2578c61010001356117b1565b6117b1856101008f0135614b03565b8d60600160208101906117c491906148f3565b6117d957858e6101200135610b259190614b03565b8d6101200135613fd6565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a7565ea16040518061014001604052808e80600001906118339190614c2d565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018e602001602081019061188b91906145d8565b6001600160a01b031681526020018e60400160208101906118ac91906145d8565b6001600160a01b03168152602001876001600160a01b03168152602001858152602001848152602001603560009054906101000a90046001600160a01b03166001600160a01b031681526020018e60a001602081019061190c9190614c76565b60020b81526020018e60c00160208101906119279190614c93565b62ffffff1681526020018e60e00160208101906119449190614c93565b62ffffff168152506040518263ffffffff1660e01b81526004016119689190614cf0565b6020604051808303816000875af1158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab91906148af565b98508891506119cb90506119c560a08c0160808d016145d8565b89614070565b6035546001600160a01b031663ded2df71896119eb6101408e018e614dc8565b8e8061016001906119fc9190614dc8565b6040518663ffffffff1660e01b8152600401611a1c959493929190614e0e565b600060405180830381600087803b158015611a3657600080fd5b505af1158015611a4a573d6000803e3d6000fd5b50505050611a6c33848c61010001358d60200160208101906107c491906145d8565b611a8a33848c61012001358d60400160208101906107c491906145d8565b611a9a60408b0160208c016145d8565b6001600160a01b031663095ea7b389611ab960808e0160608f016148f3565b611ac8578c6101000135611ad7565b611ad7856101008f0135614b03565b6040518363ffffffff1660e01b8152600401611af4929190614b1a565b6020604051808303816000875af1158015611b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b379190614b33565b50611b4860808b0160608c016148f3565b611b7257603454611b6d906001600160a01b0316836109ec60608e0160408f016145d8565b611b93565b603454611b93906001600160a01b0316836109ec60408e0160208f016145d8565b611ba360608b0160408c016145d8565b6001600160a01b031663095ea7b389611bc260808e0160608f016148f3565b611bda57611bd5856101208f0135614b03565b611be1565b8c61012001355b6040518363ffffffff1660e01b8152600401611bfe929190614b1a565b6020604051808303816000875af1158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190614b33565b506040516394bf804d60e01b8152600481018a90526001600160a01b0384811660248301528216906394bf804d9060440160408051808303816000875af1158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190614b50565b5050603554604051635c1c3fe160e01b81526001600160a01b038a8116600483015290911690635c1c3fe190602401600060405180830381600087803b158015611cfd57600080fd5b505af1158015611d11573d6000803e3d6000fd5b507fd30f500bb012dbc7bda64ed7db981183e1b9f921242b72ff61894165aa3bff449250611d4891505060a08c0160808d016145d8565b604080516001600160a01b039283168152918b166020830152810184905260600160405180910390a150506040516370a0823160e01b81523060048201526000915083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de191906148cc565b611deb9190614b03565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b91906148cc565b611e659190614b03565b90508115611ee05760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90611e9b9033908690600401614b1a565b6020604051808303816000875af1158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede9190614b33565b505b8015611f595760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb90611f149033908590600401614b1a565b6020604051808303816000875af1158015611f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f579190614b33565b505b50505050505092915050565b816001600160a01b038116611f8c5760405162461bcd60e51b815260040161071890614b74565b836001600160a01b038116611fb35760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040808320805482518185028101850190935280835261201e9383018282801561201357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ff5575b505050505088613d5a565b336000908152603360205260409020805491925088918390811061204457612044614e52565b6000918252602082200180546001600160a01b03191690556036548190612077908b9030906001600160a01b0316613db2565b909250905081156120c5576120c589838c6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b801561210e5761210e89828c6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b60355460405163b7d3824360e01b81526001600160a01b038c811660048301528b811660248301529091169063b7d3824390604401600060405180830381600087803b15801561215d57600080fd5b505af1158015612171573d6000803e3d6000fd5b505060405163d0ebdbe760e01b81526001600160a01b038a811660048301528d16925063d0ebdbe79150602401600060405180830381600087803b1580156121b857600080fd5b505af11580156121cc573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038b811660048301528d16925063f2fde38b9150602401600060405180830381600087803b15801561221357600080fd5b505af1158015612227573d6000803e3d6000fd5b5050604080513381526001600160a01b038781166020830152818301879052606082018690528d16608082015290517f1995b488d04e8e916b5fe7712a74ded2a2f1a1c34bbc77ec3aa4aebeadce1fc793509081900360a0019150a150505050505050505050565b61229c60208301836145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fd91906148af565b61230a60208401846145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b91906148af565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156123b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d691906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244491906148cc565b9050600061245560208801886145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b691906148af565b905060006124c760208901896145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612504573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252891906148af565b3360009081526033602090815260409182902080548351818402810184019094528084529394506125a293909183018282801561258e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612570575b506106399350505060208c0190508b6145d8565b50306000806125ca6125b760208d018d6145d8565b60365485906001600160a01b0316613db2565b91509150818b604001351061262c5760405162461bcd60e51b815260206004820152602260248201527f5465726d733a2073656e64206261636b20616d6f756e7430203e20616d6f756e604482015261074360f41b6064820152608401610718565b808b606001351061268a5760405162461bcd60e51b815260206004820152602260248201527f5465726d733a2073656e64206261636b20616d6f756e7431203e20616d6f756e604482015261743160f01b6064820152608401610718565b6126b261269d60a08d0160808e016145d8565b6001600160a01b0387169060408e0135613fb7565b6126da6126c560a08d0160808e016145d8565b6001600160a01b0386169060608e0135613fb7565b6001600160a01b03851663095ea7b36126f660208e018e6145d8565b61270460408f013586614b03565b6040518363ffffffff1660e01b8152600401612721929190614b1a565b6020604051808303816000875af1158015612740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127649190614b33565b506001600160a01b03841663095ea7b361278160208e018e6145d8565b61278f60608f013585614b03565b6040518363ffffffff1660e01b81526004016127ac929190614b1a565b6020604051808303816000875af11580156127cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ef9190614b33565b506000806128178c8e60400135866128079190614b03565b8f6060013586610b259190614b03565b909250905061282960208e018e6145d8565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b15801561287457600080fd5b505af1158015612888573d6000803e3d6000fd5b50505050603560009054906101000a90046001600160a01b03166001600160a01b0316635c1c3fe18e60000160208101906128c391906145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561290457600080fd5b505af1158015612918573d6000803e3d6000fd5b5061292a9250505060208e018e6145d8565b6040516394bf804d60e01b8152600481018e90526001600160a01b03878116602483015291909116906394bf804d9060440160408051808303816000875af115801561297a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299e9190614b50565b5050603560009054906101000a90046001600160a01b03166001600160a01b0316635c1c3fe18e60000160208101906129d791906145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015612a1857600080fd5b505af1158015612a2c573d6000803e3d6000fd5b505050507fd948940eaf1c92930816150587987430bba23719ae75eb2a086f411240e912c1338e6000016020810190612a6591906145d8565b604080516001600160a01b0393841681529290911660208301520160405180910390a150506040516370a0823160e01b8152306004820152600095508794506001600160a01b038a1693506370a08231925060240190506110bd565b33612ad46000546001600160a01b031690565b6001600160a01b031614612afa5760405162461bcd60e51b815260040161071890614bf8565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b826001600160a01b038116612b6b5760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452612bd69392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b50603554604051631d01f8e360e21b81526001600160a01b0390911690637407e38c9061134990879087908790600401614bca565b60336020528160005260406000208181548110612c2757600080fd5b6000918252602090912001546001600160a01b03169150829050565b826001600160a01b038116612c6a5760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452612cd59392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b506035546040516386de146760e01b81526001600160a01b038681166004830152602482018690528481166044830152909116906386de146790606401611349565b826001600160a01b038116612d3e5760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452612da99392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b506040516386ac1cb960e01b81526001600160a01b038516906386ac1cb9906113499086908690600401614e68565b603554612710600160a01b90910461ffff1610612e375760405162461bcd60e51b815260206004820152601960248201527f5465726d733a20656d6f6c756d656e74203e3d20313030252e000000000000006044820152606401610718565b600080546001600160a01b039586166001600160a01b03199182161790915560348054948616948216949094179093556035805461ffff909316600160a01b0261ffff60a01b199093169290921790915560368054919093169116179055565b33612eaa6000546001600160a01b031690565b6001600160a01b031614612ed05760405162461bcd60e51b815260040161071890614bf8565b60355461ffff600160a01b909104811690821610612f3e5760405162461bcd60e51b815260206004820152602560248201527f5465726d733a206e657720656d6f6c756d656e74203e3d206f6c6420656d6f6c6044820152641d5b595b9d60da1b6064820152608401610718565b6035805461ffff838116600160a01b81810261ffff60a01b198516179094556040805194909304909116835260208301527f7179ea06c1633dd908ac95e2c4749f1063eadecbe01501941080e07bb96764db910160405180910390a150565b816001600160a01b038116612fc45760405162461bcd60e51b815260040161071890614b74565b33600090815260336020908152604091829020805483518184028101840190945280845261302f93928301828280156114bf576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116114a157505050505084613d5a565b50604051633926ab5f60e01b815262ffffff831660048201526001600160a01b03841690633926ab5f906024016114f7565b336130746000546001600160a01b031690565b6001600160a01b03161461309a5760405162461bcd60e51b815260040161071890614bf8565b806001600160a01b0381166130c15760405162461bcd60e51b815260040161071890614b74565b603480546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527fdaecbed9cdf338cbedbd120eefc62bec9856ad3657ea396258b681e6bc17bed5910161142a565b3361312b6000546001600160a01b031690565b6001600160a01b0316146131515760405162461bcd60e51b815260040161071890614bf8565b806001600160a01b0381166131785760405162461bcd60e51b815260040161071890614b74565b603580546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f8d235c6c97ff1b07a41b6b8ac6ea040a6a6b411b20a0f02f02946fa45590bcfc910161142a565b826001600160a01b0381166131f65760405162461bcd60e51b815260040161071890614b74565b3360009081526033602090815260409182902080548351818402810184019094528084526132619392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b5060405163012c590560e61b81526001600160a01b03851690634b164140906113499086908690600401614eb2565b61329d60208301836145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe91906148af565b61330b60208401846145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c91906148af565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156133b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d791906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344591906148cc565b905061345a6105b460408801602089016148f3565b3360009081526033602090815260409182902080548351818402810184019094528084526134ce9392830182828015610625576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161060757506106399350505060208a019050896145d8565b506000806134e261073460208a018a6145d8565b90925090506134fe333060408b013561076360208d018d6145d8565b613515333060608b01356107ec60208d018d6145d8565b6000808061352960408c0160208d016148f3565b156137895760355461354b9060408d013590600160a01b900461ffff16613f93565b925061355a60208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bb91906148af565b6001600160a01b031663095ea7b36135d660208e018e6145d8565b87868f604001356135e79190614b03565b6135f19190614aeb565b6040518363ffffffff1660e01b815260040161360e929190614b1a565b6020604051808303816000875af115801561362d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136519190614b33565b50603454613670906001600160a01b03168461098b60208f018f6145d8565b61367d60208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136de91906148af565b6001600160a01b031663095ea7b36136f960208e018e6145d8565b868e606001356137099190614aeb565b6040518363ffffffff1660e01b8152600401613726929190614b1a565b6020604051808303816000875af1158015613745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137699190614b33565b5061377f8a86858e60400135610b0b9190614b03565b90925090506139dd565b6035546137a69060608d013590600160a01b900461ffff16613f93565b92506137b560208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061381691906148af565b6001600160a01b031663095ea7b361383160208e018e6145d8565b878e604001356138419190614aeb565b6040518363ffffffff1660e01b815260040161385e929190614b1a565b6020604051808303816000875af115801561387d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a19190614b33565b506034546138c0906001600160a01b031684610c5f60208f018f6145d8565b6138cd60208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561390a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392e91906148af565b6001600160a01b031663095ea7b361394960208e018e6145d8565b86868f6060013561395a9190614b03565b6139649190614aeb565b6040518363ffffffff1660e01b8152600401613981929190614b1a565b6020604051808303816000875af11580156139a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c49190614b33565b506139d78a610db38760408f0135614aeb565b90925090505b6139ea60208c018c6145d8565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b158015613a3557600080fd5b505af1158015613a49573d6000803e3d6000fd5b50506035546001600160a01b03169150635c1c3fe19050613a6d60208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015613aae57600080fd5b505af1158015613ac2573d6000803e3d6000fd5b50613ad49250505060208c018c6145d8565b6040516394bf804d60e01b8152600481018c90523060248201526001600160a01b0391909116906394bf804d9060440160408051808303816000875af1158015613b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b469190614b50565b50506035546001600160a01b0316635c1c3fe1613b6660208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015613ba757600080fd5b505af1158015613bbb573d6000803e3d6000fd5b507f1a16fdf8daa6a93a078bec0d3138fddeb826aac77e804b68d7b9d9ea6b3a8d8e9250339150611061905060208e018e6145d8565b33613c046000546001600160a01b031690565b6001600160a01b031614613c2a5760405162461bcd60e51b815260040161071890614bf8565b6001600160a01b038116613c8f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610718565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b82613cf85760008111613cfd565b600082115b613d555760405162461bcd60e51b815260206004820152602360248201527f5465726d733a206e6f2070726f6a65637420746f6b656e20616c6c6f6361746960448201526237b71760e91b6064820152608401610718565b505050565b600080613d678484614189565b9250905080613dab5760405162461bcd60e51b815260206004820152601060248201526f2a32b936b99d103737ba1037bbb732b960811b6044820152606401610718565b5092915050565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918291908716906370a0823190602401602060405180830381865afa158015613e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2491906148cc565b6040516330c3f3f760e21b8152600481018290526001600160a01b03888116602483015291925060009186169063c30fcfdc90604401600060405180830381865afa158015613e77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e9f9190810190614ef5565b60405163f4effe4160e01b81529091506001600160a01b0388169063f4effe4190613ed290849086908b9060040161501e565b60408051808303816000875af1158015613ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f149190614b50565b909890975095505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613f8d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526141f1565b50505050565b6000612710613fa661ffff8416856150ad565b613fb091906150cc565b9392505050565b613d558363a9059cbb60e01b8484604051602401613f56929190614b1a565b600080613fec84670de0b6b3a7640000876142c3565b915061400183670de0b6b3a7640000876142c3565b9050935093915050565b806001600160a01b0316826001600160a01b03161061406c5760405162461bcd60e51b815260206004820152601d60248201527f5465726d733a20746f6b656e73206f7264657220696e7665727465642e0000006044820152606401610718565b5050565b6001600160a01b0382166000908152603360205260408120905b815481101561411857826001600160a01b03168282815481106140af576140af614e52565b6000918252602090912001546001600160a01b0316036141065760405162461bcd60e51b815260206004820152601260248201527115195c9b5cce881d985d5b1d08195e1a5cdd60721b6044820152606401610718565b80614110816150ee565b91505061408a565b508054600181018255600082815260209081902090910180546001600160a01b0319166001600160a01b03858116918217909255604080519287168352928201527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f6953910160405180910390a1505050565b6000805b83518110156141e357826001600160a01b03168482815181106141b2576141b2614e52565b60200260200101516001600160a01b0316036141d157600191506141ea565b806141db816150ee565b91505061418d565b5060009050805b9250929050565b6000614246826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143709092919063ffffffff16565b805190915015613d5557808060200190518101906142649190614b33565b613d555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610718565b60008080600019858709858702925082811083820303915050806000036142fc57600084116142f157600080fd5b508290049050613fb0565b80841161430857600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b606061437f8484600085614387565b949350505050565b6060824710156143e85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610718565b843b6144365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610718565b600080866001600160a01b031685876040516144529190615107565b60006040518083038185875af1925050503d806000811461448f576040519150601f19603f3d011682016040523d82523d6000602084013e614494565b606091505b50915091506144a48282866144af565b979650505050505050565b606083156144be575081613fb0565b8251156144ce5782518084602001fd5b8160405162461bcd60e51b81526004016107189190615123565b6000608082840312156144fa57600080fd5b50919050565b60008060a0838503121561451357600080fd5b61451d84846144e8565b946080939093013593505050565b6001600160a01b038116811461454057600080fd5b50565b60008083601f84011261455557600080fd5b5081356001600160401b0381111561456c57600080fd5b6020830191508360208285010111156141ea57600080fd5b60008060006040848603121561459957600080fd5b83356145a48161452b565b925060208401356001600160401b038111156145bf57600080fd5b6145cb86828701614543565b9497909650939450505050565b6000602082840312156145ea57600080fd5b8135613fb08161452b565b8060020b811461454057600080fd5b6000806040838503121561461757600080fd5b82356146228161452b565b91506020830135614632816145f5565b809150509250929050565b62ffffff8116811461454057600080fd5b6000806040838503121561466157600080fd5b823561466c8161452b565b915060208301356146328161463d565b6000806040838503121561468f57600080fd5b82356001600160401b038111156146a557600080fd5b830161018081860312156146b857600080fd5b946020939093013593505050565b600080600080608085870312156146dc57600080fd5b84356146e78161452b565b935060208501356146f78161452b565b925060408501356147078161452b565b915060608501356147178161452b565b939692955090935050565b60008082840360c081121561473657600080fd5b60a081121561474457600080fd5b50919360a08501359350915050565b6000806040838503121561476657600080fd5b82356146b88161452b565b60008060006060848603121561478657600080fd5b83356147918161452b565b92506020840135915060408401356147a88161452b565b809150509250925092565b60008083601f8401126147c557600080fd5b5081356001600160401b038111156147dc57600080fd5b6020830191508360208260051b85010111156141ea57600080fd5b60008060006040848603121561480c57600080fd5b83356148178161452b565b925060208401356001600160401b0381111561483257600080fd5b6145cb868287016147b3565b803561ffff8116811461485057600080fd5b919050565b6000806000806080858703121561486b57600080fd5b84356148768161452b565b935060208501356148868161452b565b92506147076040860161483e565b6000602082840312156148a657600080fd5b613fb08261483e565b6000602082840312156148c157600080fd5b8151613fb08161452b565b6000602082840312156148de57600080fd5b5051919050565b801515811461454057600080fd5b60006020828403121561490557600080fd5b8135613fb0816148e5565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561494857614948614910565b60405290565b604080519081016001600160401b038111828210171561494857614948614910565b604051606081016001600160401b038111828210171561494857614948614910565b604051601f8201601f191681016001600160401b03811182821017156149ba576149ba614910565b604052919050565b60005b838110156149dd5781810151838201526020016149c5565b83811115613f8d5750506000910152565b60006020808385031215614a0157600080fd5b82516001600160401b0380821115614a1857600080fd5b9084019060a08287031215614a2c57600080fd5b614a34614926565b825181528383015184820152604083015182811115614a5257600080fd5b8301601f81018813614a6357600080fd5b805183811115614a7557614a75614910565b614a87601f8201601f19168701614992565b93508084528886828401011115614a9d57600080fd5b614aac818786018885016149c2565b505081604082015260608301516060820152608083015160808201528094505050505092915050565b634e487b7160e01b600052601160045260246000fd5b60008219821115614afe57614afe614ad5565b500190565b600082821015614b1557614b15614ad5565b500390565b6001600160a01b03929092168252602082015260400190565b600060208284031215614b4557600080fd5b8151613fb0816148e5565b60008060408385031215614b6357600080fd5b505080516020909101519092909150565b6020808252601390820152725465726d733a2061646472657373205a65726f60681b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201819052600090614bef9083018486614ba1565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e19843603018112614c4457600080fd5b8301803591506001600160401b03821115614c5e57600080fd5b6020019150600581901b36038213156141ea57600080fd5b600060208284031215614c8857600080fd5b8135613fb0816145f5565b600060208284031215614ca557600080fd5b8135613fb08161463d565b600081518084526020808501945080840160005b83811015614ce557815162ffffff1687529582019590820190600101614cc4565b509495945050505050565b6020815260008251610140806020850152614d0f610160850183614cb0565b91506020850151614d2b60408601826001600160a01b03169052565b5060408501516001600160a01b03811660608601525060608501516001600160a01b038116608086015250608085015160a085015260a085015160c085015260c0850151614d8460e08601826001600160a01b03169052565b5060e0850151610100614d9b8187018360020b9052565b8601519050610120614db38682018362ffffff169052565b9095015162ffffff1693019290925250919050565b6000808335601e19843603018112614ddf57600080fd5b8301803591506001600160401b03821115614df957600080fd5b6020019150368190038213156141ea57600080fd5b6001600160a01b0386168152606060208201819052600090614e339083018688614ba1565b8281036040840152614e46818587614ba1565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60208082528181018390526000908460408401835b86811015614ea7578235614e908161463d565b62ffffff1682529183019190830190600101614e7d565b509695505050505050565b60208082528181018390526000908460408401835b86811015614ea7578235614eda8161452b565b6001600160a01b031682529183019190830190600101614ec7565b60006020808385031215614f0857600080fd5b82516001600160401b0380821115614f1f57600080fd5b818501915085601f830112614f3357600080fd5b815181811115614f4557614f45614910565b614f53848260051b01614992565b818152848101925060079190911b830184019087821115614f7357600080fd5b928401925b818410156144a4578388036080811215614f925760008081fd5b614f9a61494e565b85516001600160801b0381168114614fb25760008081fd5b81526060601f198301811315614fc85760008081fd5b614fd0614970565b925087870151614fdf816145f5565b8352604087810151614ff0816145f5565b848a015290870151906150028261463d565b8301528087019190915283526080939093019291840191614f78565b6060808252845182820181905260009190608090818501906020808a01865b8381101561508c57815180516001600160801b031686528301518051600290810b8588015281850151900b604080880191909152015162ffffff1687860152938501939082019060010161503d565b50508601889052506001600160a01b0386166040860152925061437f915050565b60008160001904831182151516156150c7576150c7614ad5565b500290565b6000826150e957634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161510057615100614ad5565b5060010190565b600082516151198184602087016149c2565b9190910192915050565b60208152600082518060208401526151428160408501602087016149c2565b601f01601f1916919091016040019291505056fea2646970667358221220adb013a9e79a8ceb4015a7c19526ce4fb46f3a37f27ab566f3bc6206f11008e164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80637407e38c116100f9578063bd324d3211610097578063ea6b186c11610071578063ea6b186c1461039e578063eaaa9299146103b1578063f2cb118a146103c4578063f2fde38b146103d757600080fd5b8063bd324d3214610365578063bfd7e75214610378578063d0ebdbe71461038b57600080fd5b80638da5cb5b116100d35780638da5cb5b1461031b578063ae5e24c21461032c578063b1ffa5821461033f578063b33d46dc1461035257600080fd5b80637407e38c146102e25780637bbfc69e146102f557806386de14671461030857600080fd5b80634e543b261161016657806357dc1d6a1161014057806357dc1d6a146102a157806368b6702e146102b45780636f22cf97146102c7578063715018a6146102da57600080fd5b80634e543b261461026857806351a6deba1461027b57806356ee72be1461028e57600080fd5b806304f3bcec146101ae578063233fc650146101de57806326c1a7b1146101f3578063330807a91461021b5780633a91f42a14610242578063481c6a7514610255575b600080fd5b6036546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f16101ec366004614500565b6103ea565b005b60355461020890600160a01b900461ffff1681565b60405161ffff90911681526020016101d5565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b6101f1610250366004614584565b611280565b6035546101c1906001600160a01b031681565b6101f16102763660046145d8565b611377565b6101f1610289366004614604565b611436565b6101f161029c36600461464e565b61152e565b6101c16102af36600461467c565b6115f2565b6101f16102c23660046146c6565b611f65565b6101f16102d5366004614722565b61228f565b6101f1612ac1565b6101f16102f0366004614584565b612b44565b6101c1610303366004614753565b612c0b565b6101f1610316366004614771565b612c43565b6000546001600160a01b03166101c1565b6101f161033a3660046147f7565b612d17565b6101f161034d366004614855565b612dd8565b6101f1610360366004614894565b612e97565b6101f161037336600461464e565b612f9d565b6101f16103863660046145d8565b613061565b6101f16103993660046145d8565b613118565b6034546101c1906001600160a01b031681565b6101f16103bf3660046147f7565b6131cf565b6101f16103d2366004614500565b613290565b6101f16103e53660046145d8565b613bf1565b6103f760208301836145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906148af565b61046560208401846145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c691906148af565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053191906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906148cc565b90506105c36105b460408801602089016148f3565b87604001358860600135613cea565b33600090815260336020908152604091829020805483518184028101840190945280845261063e939283018282801561062557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610607575b506106399350505060208a019050896145d8565b613d5a565b5060355442906001600160a01b03166390229af761065f60208a018a6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381865afa1580156106a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106cb91908101906149ee565b60800151106107215760405162461bcd60e51b815260206004820152601760248201527f5465726d733a207465726d73206973206163746976652e00000000000000000060448201526064015b60405180910390fd5b60008061074761073460208a018a6145d8565b60365430906001600160a01b0316613db2565b90925090506107d5333060408b013561076360208d018d6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c491906148af565b6001600160a01b0316929190613f22565b610829333060608b01356107ec60208d018d6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a0573d6000803e3d6000fd5b6000808061083d60408c0160208d016148f3565b15610b34576108666108538660408e0135614aeb565b603554600160a01b900461ffff16613f93565b925061087560208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d691906148af565b6001600160a01b031663095ea7b36108f160208e018e6145d8565b87868f604001356109029190614b03565b61090c9190614aeb565b6040518363ffffffff1660e01b8152600401610929929190614b1a565b6020604051808303816000875af1158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190614b33565b506034546109fc906001600160a01b03168461098b60208f018f6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec91906148af565b6001600160a01b03169190613fb7565b610a0960208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a91906148af565b6001600160a01b031663095ea7b3610a8560208e018e6145d8565b868e60600135610a959190614aeb565b6040518363ffffffff1660e01b8152600401610ab2929190614b1a565b6020604051808303816000875af1158015610ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af59190614b33565b50610b2a8a86858e60400135610b0b9190614b03565b610b159190614aeb565b868e60600135610b259190614aeb565b613fd6565b9092509050610dd4565b610b456108538560608e0135614aeb565b9250610b5460208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb591906148af565b6001600160a01b031663095ea7b3610bd060208e018e6145d8565b878e60400135610be09190614aeb565b6040518363ffffffff1660e01b8152600401610bfd929190614b1a565b6020604051808303816000875af1158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190614b33565b50603454610c9c906001600160a01b031684610c5f60208f018f6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b610ca960208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a91906148af565b6001600160a01b031663095ea7b3610d2560208e018e6145d8565b86868f60600135610d369190614b03565b610d409190614aeb565b6040518363ffffffff1660e01b8152600401610d5d929190614b1a565b6020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da09190614b33565b50610dce8a610db38760408f0135614aeb565b86868f60600135610dc49190614b03565b610b259190614aeb565b90925090505b610de160208c018c6145d8565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b158015610e2c57600080fd5b505af1158015610e40573d6000803e3d6000fd5b50506035546001600160a01b03169150635c1c3fe19050610e6460208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015610ea557600080fd5b505af1158015610eb9573d6000803e3d6000fd5b50610ecb9250505060208c018c6145d8565b6040516394bf804d60e01b8152600481018c90523060248201526001600160a01b0391909116906394bf804d9060440160408051808303816000875af1158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d9190614b50565b50506035546001600160a01b0316635c1c3fe1610f5d60208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b50506035546001600160a01b03169150636f2cbdf09050610fd660208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b507fc6c23c4bbbc3cb7b831379a165ad09a48801176ff5e9a73213986a3db573d1f39250339150611061905060208e018e6145d8565b604080516001600160a01b039384168152929091166020830152810185905260600160405180910390a150506040516370a0823160e01b8152306004820152600093508592506001600160a01b03881691506370a08231906024015b602060405180830381865afa1580156110da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fe91906148cc565b6111089190614b03565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117891906148cc565b6111829190614b03565b905081156111fd5760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906111b89033908690600401614b1a565b6020604051808303816000875af11580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb9190614b33565b505b80156112765760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb906112319033908590600401614b1a565b6020604051808303816000875af1158015611250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112749190614b33565b505b5050505050505050565b826001600160a01b0381166112a75760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452611314939283018282801561130957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112eb575b505050505085613d5a565b5060355460405163152f2bb760e01b81526001600160a01b039091169063152f2bb79061134990879087908790600401614bca565b600060405180830381600087803b15801561136357600080fd5b505af1158015611276573d6000803e3d6000fd5b3361138a6000546001600160a01b031690565b6001600160a01b0316146113b05760405162461bcd60e51b815260040161071890614bf8565b806001600160a01b0381166113d75760405162461bcd60e51b815260040161071890614b74565b603680546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f6cb59c795917577ec693948e42535bd42e4c7784893c9fff6d7b7102f64a1d7291015b60405180910390a15050565b816001600160a01b03811661145d5760405162461bcd60e51b815260040161071890614b74565b3360009081526033602090815260409182902080548351818402810184019094528084526114ca93928301828280156114bf57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114a1575b505050505084613d5a565b50604051631e5ff9ff60e11b8152600283900b60048201526001600160a01b03841690633cbff3fe906024015b600060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b50505050505050565b816001600160a01b0381166115555760405162461bcd60e51b815260040161071890614b74565b3360009081526033602090815260409182902080548351818402810184019094528084526115c093928301828280156114bf576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116114a157505050505084613d5a565b5060405163138e02ad60e21b815262ffffff831660048201526001600160a01b03841690634e380ab4906024016114f7565b600061160460408401602085016145d8565b61161460608501604086016145d8565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561165b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167f91906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed91906148cc565b90506117136117026080890160608a016148f3565b886101000135896101200135613cea565b61173b6117266040890160208a016145d8565b61173660608a0160408b016145d8565b61400b565b30600061177a61175160808b0160608c016148f3565b61176057896101200135610853565b89610100013560355461ffff600160a01b90910416613f93565b90506000806117e48a61179360808e0160608f016148f3565b6117a2578c61010001356117b1565b6117b1856101008f0135614b03565b8d60600160208101906117c491906148f3565b6117d957858e6101200135610b259190614b03565b8d6101200135613fd6565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a7565ea16040518061014001604052808e80600001906118339190614c2d565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018e602001602081019061188b91906145d8565b6001600160a01b031681526020018e60400160208101906118ac91906145d8565b6001600160a01b03168152602001876001600160a01b03168152602001858152602001848152602001603560009054906101000a90046001600160a01b03166001600160a01b031681526020018e60a001602081019061190c9190614c76565b60020b81526020018e60c00160208101906119279190614c93565b62ffffff1681526020018e60e00160208101906119449190614c93565b62ffffff168152506040518263ffffffff1660e01b81526004016119689190614cf0565b6020604051808303816000875af1158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab91906148af565b98508891506119cb90506119c560a08c0160808d016145d8565b89614070565b6035546001600160a01b031663ded2df71896119eb6101408e018e614dc8565b8e8061016001906119fc9190614dc8565b6040518663ffffffff1660e01b8152600401611a1c959493929190614e0e565b600060405180830381600087803b158015611a3657600080fd5b505af1158015611a4a573d6000803e3d6000fd5b50505050611a6c33848c61010001358d60200160208101906107c491906145d8565b611a8a33848c61012001358d60400160208101906107c491906145d8565b611a9a60408b0160208c016145d8565b6001600160a01b031663095ea7b389611ab960808e0160608f016148f3565b611ac8578c6101000135611ad7565b611ad7856101008f0135614b03565b6040518363ffffffff1660e01b8152600401611af4929190614b1a565b6020604051808303816000875af1158015611b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b379190614b33565b50611b4860808b0160608c016148f3565b611b7257603454611b6d906001600160a01b0316836109ec60608e0160408f016145d8565b611b93565b603454611b93906001600160a01b0316836109ec60408e0160208f016145d8565b611ba360608b0160408c016145d8565b6001600160a01b031663095ea7b389611bc260808e0160608f016148f3565b611bda57611bd5856101208f0135614b03565b611be1565b8c61012001355b6040518363ffffffff1660e01b8152600401611bfe929190614b1a565b6020604051808303816000875af1158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190614b33565b506040516394bf804d60e01b8152600481018a90526001600160a01b0384811660248301528216906394bf804d9060440160408051808303816000875af1158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190614b50565b5050603554604051635c1c3fe160e01b81526001600160a01b038a8116600483015290911690635c1c3fe190602401600060405180830381600087803b158015611cfd57600080fd5b505af1158015611d11573d6000803e3d6000fd5b507fd30f500bb012dbc7bda64ed7db981183e1b9f921242b72ff61894165aa3bff449250611d4891505060a08c0160808d016145d8565b604080516001600160a01b039283168152918b166020830152810184905260600160405180910390a150506040516370a0823160e01b81523060048201526000915083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de191906148cc565b611deb9190614b03565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b91906148cc565b611e659190614b03565b90508115611ee05760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90611e9b9033908690600401614b1a565b6020604051808303816000875af1158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede9190614b33565b505b8015611f595760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb90611f149033908590600401614b1a565b6020604051808303816000875af1158015611f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f579190614b33565b505b50505050505092915050565b816001600160a01b038116611f8c5760405162461bcd60e51b815260040161071890614b74565b836001600160a01b038116611fb35760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040808320805482518185028101850190935280835261201e9383018282801561201357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ff5575b505050505088613d5a565b336000908152603360205260409020805491925088918390811061204457612044614e52565b6000918252602082200180546001600160a01b03191690556036548190612077908b9030906001600160a01b0316613db2565b909250905081156120c5576120c589838c6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b801561210e5761210e89828c6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b60355460405163b7d3824360e01b81526001600160a01b038c811660048301528b811660248301529091169063b7d3824390604401600060405180830381600087803b15801561215d57600080fd5b505af1158015612171573d6000803e3d6000fd5b505060405163d0ebdbe760e01b81526001600160a01b038a811660048301528d16925063d0ebdbe79150602401600060405180830381600087803b1580156121b857600080fd5b505af11580156121cc573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038b811660048301528d16925063f2fde38b9150602401600060405180830381600087803b15801561221357600080fd5b505af1158015612227573d6000803e3d6000fd5b5050604080513381526001600160a01b038781166020830152818301879052606082018690528d16608082015290517f1995b488d04e8e916b5fe7712a74ded2a2f1a1c34bbc77ec3aa4aebeadce1fc793509081900360a0019150a150505050505050505050565b61229c60208301836145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fd91906148af565b61230a60208401846145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b91906148af565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156123b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d691906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244491906148cc565b9050600061245560208801886145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b691906148af565b905060006124c760208901896145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612504573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252891906148af565b3360009081526033602090815260409182902080548351818402810184019094528084529394506125a293909183018282801561258e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612570575b506106399350505060208c0190508b6145d8565b50306000806125ca6125b760208d018d6145d8565b60365485906001600160a01b0316613db2565b91509150818b604001351061262c5760405162461bcd60e51b815260206004820152602260248201527f5465726d733a2073656e64206261636b20616d6f756e7430203e20616d6f756e604482015261074360f41b6064820152608401610718565b808b606001351061268a5760405162461bcd60e51b815260206004820152602260248201527f5465726d733a2073656e64206261636b20616d6f756e7431203e20616d6f756e604482015261743160f01b6064820152608401610718565b6126b261269d60a08d0160808e016145d8565b6001600160a01b0387169060408e0135613fb7565b6126da6126c560a08d0160808e016145d8565b6001600160a01b0386169060608e0135613fb7565b6001600160a01b03851663095ea7b36126f660208e018e6145d8565b61270460408f013586614b03565b6040518363ffffffff1660e01b8152600401612721929190614b1a565b6020604051808303816000875af1158015612740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127649190614b33565b506001600160a01b03841663095ea7b361278160208e018e6145d8565b61278f60608f013585614b03565b6040518363ffffffff1660e01b81526004016127ac929190614b1a565b6020604051808303816000875af11580156127cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ef9190614b33565b506000806128178c8e60400135866128079190614b03565b8f6060013586610b259190614b03565b909250905061282960208e018e6145d8565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b15801561287457600080fd5b505af1158015612888573d6000803e3d6000fd5b50505050603560009054906101000a90046001600160a01b03166001600160a01b0316635c1c3fe18e60000160208101906128c391906145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561290457600080fd5b505af1158015612918573d6000803e3d6000fd5b5061292a9250505060208e018e6145d8565b6040516394bf804d60e01b8152600481018e90526001600160a01b03878116602483015291909116906394bf804d9060440160408051808303816000875af115801561297a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299e9190614b50565b5050603560009054906101000a90046001600160a01b03166001600160a01b0316635c1c3fe18e60000160208101906129d791906145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015612a1857600080fd5b505af1158015612a2c573d6000803e3d6000fd5b505050507fd948940eaf1c92930816150587987430bba23719ae75eb2a086f411240e912c1338e6000016020810190612a6591906145d8565b604080516001600160a01b0393841681529290911660208301520160405180910390a150506040516370a0823160e01b8152306004820152600095508794506001600160a01b038a1693506370a08231925060240190506110bd565b33612ad46000546001600160a01b031690565b6001600160a01b031614612afa5760405162461bcd60e51b815260040161071890614bf8565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b826001600160a01b038116612b6b5760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452612bd69392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b50603554604051631d01f8e360e21b81526001600160a01b0390911690637407e38c9061134990879087908790600401614bca565b60336020528160005260406000208181548110612c2757600080fd5b6000918252602090912001546001600160a01b03169150829050565b826001600160a01b038116612c6a5760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452612cd59392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b506035546040516386de146760e01b81526001600160a01b038681166004830152602482018690528481166044830152909116906386de146790606401611349565b826001600160a01b038116612d3e5760405162461bcd60e51b815260040161071890614b74565b336000908152603360209081526040918290208054835181840281018401909452808452612da99392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b506040516386ac1cb960e01b81526001600160a01b038516906386ac1cb9906113499086908690600401614e68565b603554612710600160a01b90910461ffff1610612e375760405162461bcd60e51b815260206004820152601960248201527f5465726d733a20656d6f6c756d656e74203e3d20313030252e000000000000006044820152606401610718565b600080546001600160a01b039586166001600160a01b03199182161790915560348054948616948216949094179093556035805461ffff909316600160a01b0261ffff60a01b199093169290921790915560368054919093169116179055565b33612eaa6000546001600160a01b031690565b6001600160a01b031614612ed05760405162461bcd60e51b815260040161071890614bf8565b60355461ffff600160a01b909104811690821610612f3e5760405162461bcd60e51b815260206004820152602560248201527f5465726d733a206e657720656d6f6c756d656e74203e3d206f6c6420656d6f6c6044820152641d5b595b9d60da1b6064820152608401610718565b6035805461ffff838116600160a01b81810261ffff60a01b198516179094556040805194909304909116835260208301527f7179ea06c1633dd908ac95e2c4749f1063eadecbe01501941080e07bb96764db910160405180910390a150565b816001600160a01b038116612fc45760405162461bcd60e51b815260040161071890614b74565b33600090815260336020908152604091829020805483518184028101840190945280845261302f93928301828280156114bf576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116114a157505050505084613d5a565b50604051633926ab5f60e01b815262ffffff831660048201526001600160a01b03841690633926ab5f906024016114f7565b336130746000546001600160a01b031690565b6001600160a01b03161461309a5760405162461bcd60e51b815260040161071890614bf8565b806001600160a01b0381166130c15760405162461bcd60e51b815260040161071890614b74565b603480546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527fdaecbed9cdf338cbedbd120eefc62bec9856ad3657ea396258b681e6bc17bed5910161142a565b3361312b6000546001600160a01b031690565b6001600160a01b0316146131515760405162461bcd60e51b815260040161071890614bf8565b806001600160a01b0381166131785760405162461bcd60e51b815260040161071890614b74565b603580546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f8d235c6c97ff1b07a41b6b8ac6ea040a6a6b411b20a0f02f02946fa45590bcfc910161142a565b826001600160a01b0381166131f65760405162461bcd60e51b815260040161071890614b74565b3360009081526033602090815260409182902080548351818402810184019094528084526132619392830182828015611309576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112eb57505050505085613d5a565b5060405163012c590560e61b81526001600160a01b03851690634b164140906113499086908690600401614eb2565b61329d60208301836145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe91906148af565b61330b60208401846145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c91906148af565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156133b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d791906148cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344591906148cc565b905061345a6105b460408801602089016148f3565b3360009081526033602090815260409182902080548351818402810184019094528084526134ce9392830182828015610625576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161060757506106399350505060208a019050896145d8565b506000806134e261073460208a018a6145d8565b90925090506134fe333060408b013561076360208d018d6145d8565b613515333060608b01356107ec60208d018d6145d8565b6000808061352960408c0160208d016148f3565b156137895760355461354b9060408d013590600160a01b900461ffff16613f93565b925061355a60208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bb91906148af565b6001600160a01b031663095ea7b36135d660208e018e6145d8565b87868f604001356135e79190614b03565b6135f19190614aeb565b6040518363ffffffff1660e01b815260040161360e929190614b1a565b6020604051808303816000875af115801561362d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136519190614b33565b50603454613670906001600160a01b03168461098b60208f018f6145d8565b61367d60208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136de91906148af565b6001600160a01b031663095ea7b36136f960208e018e6145d8565b868e606001356137099190614aeb565b6040518363ffffffff1660e01b8152600401613726929190614b1a565b6020604051808303816000875af1158015613745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137699190614b33565b5061377f8a86858e60400135610b0b9190614b03565b90925090506139dd565b6035546137a69060608d013590600160a01b900461ffff16613f93565b92506137b560208c018c6145d8565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061381691906148af565b6001600160a01b031663095ea7b361383160208e018e6145d8565b878e604001356138419190614aeb565b6040518363ffffffff1660e01b815260040161385e929190614b1a565b6020604051808303816000875af115801561387d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a19190614b33565b506034546138c0906001600160a01b031684610c5f60208f018f6145d8565b6138cd60208c018c6145d8565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561390a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392e91906148af565b6001600160a01b031663095ea7b361394960208e018e6145d8565b86868f6060013561395a9190614b03565b6139649190614aeb565b6040518363ffffffff1660e01b8152600401613981929190614b1a565b6020604051808303816000875af11580156139a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c49190614b33565b506139d78a610db38760408f0135614aeb565b90925090505b6139ea60208c018c6145d8565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b158015613a3557600080fd5b505af1158015613a49573d6000803e3d6000fd5b50506035546001600160a01b03169150635c1c3fe19050613a6d60208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015613aae57600080fd5b505af1158015613ac2573d6000803e3d6000fd5b50613ad49250505060208c018c6145d8565b6040516394bf804d60e01b8152600481018c90523060248201526001600160a01b0391909116906394bf804d9060440160408051808303816000875af1158015613b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b469190614b50565b50506035546001600160a01b0316635c1c3fe1613b6660208e018e6145d8565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015613ba757600080fd5b505af1158015613bbb573d6000803e3d6000fd5b507f1a16fdf8daa6a93a078bec0d3138fddeb826aac77e804b68d7b9d9ea6b3a8d8e9250339150611061905060208e018e6145d8565b33613c046000546001600160a01b031690565b6001600160a01b031614613c2a5760405162461bcd60e51b815260040161071890614bf8565b6001600160a01b038116613c8f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610718565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b82613cf85760008111613cfd565b600082115b613d555760405162461bcd60e51b815260206004820152602360248201527f5465726d733a206e6f2070726f6a65637420746f6b656e20616c6c6f6361746960448201526237b71760e91b6064820152608401610718565b505050565b600080613d678484614189565b9250905080613dab5760405162461bcd60e51b815260206004820152601060248201526f2a32b936b99d103737ba1037bbb732b960811b6044820152606401610718565b5092915050565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918291908716906370a0823190602401602060405180830381865afa158015613e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2491906148cc565b6040516330c3f3f760e21b8152600481018290526001600160a01b03888116602483015291925060009186169063c30fcfdc90604401600060405180830381865afa158015613e77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e9f9190810190614ef5565b60405163f4effe4160e01b81529091506001600160a01b0388169063f4effe4190613ed290849086908b9060040161501e565b60408051808303816000875af1158015613ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f149190614b50565b909890975095505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613f8d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526141f1565b50505050565b6000612710613fa661ffff8416856150ad565b613fb091906150cc565b9392505050565b613d558363a9059cbb60e01b8484604051602401613f56929190614b1a565b600080613fec84670de0b6b3a7640000876142c3565b915061400183670de0b6b3a7640000876142c3565b9050935093915050565b806001600160a01b0316826001600160a01b03161061406c5760405162461bcd60e51b815260206004820152601d60248201527f5465726d733a20746f6b656e73206f7264657220696e7665727465642e0000006044820152606401610718565b5050565b6001600160a01b0382166000908152603360205260408120905b815481101561411857826001600160a01b03168282815481106140af576140af614e52565b6000918252602090912001546001600160a01b0316036141065760405162461bcd60e51b815260206004820152601260248201527115195c9b5cce881d985d5b1d08195e1a5cdd60721b6044820152606401610718565b80614110816150ee565b91505061408a565b508054600181018255600082815260209081902090910180546001600160a01b0319166001600160a01b03858116918217909255604080519287168352928201527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f6953910160405180910390a1505050565b6000805b83518110156141e357826001600160a01b03168482815181106141b2576141b2614e52565b60200260200101516001600160a01b0316036141d157600191506141ea565b806141db816150ee565b91505061418d565b5060009050805b9250929050565b6000614246826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143709092919063ffffffff16565b805190915015613d5557808060200190518101906142649190614b33565b613d555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610718565b60008080600019858709858702925082811083820303915050806000036142fc57600084116142f157600080fd5b508290049050613fb0565b80841161430857600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b606061437f8484600085614387565b949350505050565b6060824710156143e85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610718565b843b6144365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610718565b600080866001600160a01b031685876040516144529190615107565b60006040518083038185875af1925050503d806000811461448f576040519150601f19603f3d011682016040523d82523d6000602084013e614494565b606091505b50915091506144a48282866144af565b979650505050505050565b606083156144be575081613fb0565b8251156144ce5782518084602001fd5b8160405162461bcd60e51b81526004016107189190615123565b6000608082840312156144fa57600080fd5b50919050565b60008060a0838503121561451357600080fd5b61451d84846144e8565b946080939093013593505050565b6001600160a01b038116811461454057600080fd5b50565b60008083601f84011261455557600080fd5b5081356001600160401b0381111561456c57600080fd5b6020830191508360208285010111156141ea57600080fd5b60008060006040848603121561459957600080fd5b83356145a48161452b565b925060208401356001600160401b038111156145bf57600080fd5b6145cb86828701614543565b9497909650939450505050565b6000602082840312156145ea57600080fd5b8135613fb08161452b565b8060020b811461454057600080fd5b6000806040838503121561461757600080fd5b82356146228161452b565b91506020830135614632816145f5565b809150509250929050565b62ffffff8116811461454057600080fd5b6000806040838503121561466157600080fd5b823561466c8161452b565b915060208301356146328161463d565b6000806040838503121561468f57600080fd5b82356001600160401b038111156146a557600080fd5b830161018081860312156146b857600080fd5b946020939093013593505050565b600080600080608085870312156146dc57600080fd5b84356146e78161452b565b935060208501356146f78161452b565b925060408501356147078161452b565b915060608501356147178161452b565b939692955090935050565b60008082840360c081121561473657600080fd5b60a081121561474457600080fd5b50919360a08501359350915050565b6000806040838503121561476657600080fd5b82356146b88161452b565b60008060006060848603121561478657600080fd5b83356147918161452b565b92506020840135915060408401356147a88161452b565b809150509250925092565b60008083601f8401126147c557600080fd5b5081356001600160401b038111156147dc57600080fd5b6020830191508360208260051b85010111156141ea57600080fd5b60008060006040848603121561480c57600080fd5b83356148178161452b565b925060208401356001600160401b0381111561483257600080fd5b6145cb868287016147b3565b803561ffff8116811461485057600080fd5b919050565b6000806000806080858703121561486b57600080fd5b84356148768161452b565b935060208501356148868161452b565b92506147076040860161483e565b6000602082840312156148a657600080fd5b613fb08261483e565b6000602082840312156148c157600080fd5b8151613fb08161452b565b6000602082840312156148de57600080fd5b5051919050565b801515811461454057600080fd5b60006020828403121561490557600080fd5b8135613fb0816148e5565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561494857614948614910565b60405290565b604080519081016001600160401b038111828210171561494857614948614910565b604051606081016001600160401b038111828210171561494857614948614910565b604051601f8201601f191681016001600160401b03811182821017156149ba576149ba614910565b604052919050565b60005b838110156149dd5781810151838201526020016149c5565b83811115613f8d5750506000910152565b60006020808385031215614a0157600080fd5b82516001600160401b0380821115614a1857600080fd5b9084019060a08287031215614a2c57600080fd5b614a34614926565b825181528383015184820152604083015182811115614a5257600080fd5b8301601f81018813614a6357600080fd5b805183811115614a7557614a75614910565b614a87601f8201601f19168701614992565b93508084528886828401011115614a9d57600080fd5b614aac818786018885016149c2565b505081604082015260608301516060820152608083015160808201528094505050505092915050565b634e487b7160e01b600052601160045260246000fd5b60008219821115614afe57614afe614ad5565b500190565b600082821015614b1557614b15614ad5565b500390565b6001600160a01b03929092168252602082015260400190565b600060208284031215614b4557600080fd5b8151613fb0816148e5565b60008060408385031215614b6357600080fd5b505080516020909101519092909150565b6020808252601390820152725465726d733a2061646472657373205a65726f60681b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201819052600090614bef9083018486614ba1565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e19843603018112614c4457600080fd5b8301803591506001600160401b03821115614c5e57600080fd5b6020019150600581901b36038213156141ea57600080fd5b600060208284031215614c8857600080fd5b8135613fb0816145f5565b600060208284031215614ca557600080fd5b8135613fb08161463d565b600081518084526020808501945080840160005b83811015614ce557815162ffffff1687529582019590820190600101614cc4565b509495945050505050565b6020815260008251610140806020850152614d0f610160850183614cb0565b91506020850151614d2b60408601826001600160a01b03169052565b5060408501516001600160a01b03811660608601525060608501516001600160a01b038116608086015250608085015160a085015260a085015160c085015260c0850151614d8460e08601826001600160a01b03169052565b5060e0850151610100614d9b8187018360020b9052565b8601519050610120614db38682018362ffffff169052565b9095015162ffffff1693019290925250919050565b6000808335601e19843603018112614ddf57600080fd5b8301803591506001600160401b03821115614df957600080fd5b6020019150368190038213156141ea57600080fd5b6001600160a01b0386168152606060208201819052600090614e339083018688614ba1565b8281036040840152614e46818587614ba1565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60208082528181018390526000908460408401835b86811015614ea7578235614e908161463d565b62ffffff1682529183019190830190600101614e7d565b509695505050505050565b60208082528181018390526000908460408401835b86811015614ea7578235614eda8161452b565b6001600160a01b031682529183019190830190600101614ec7565b60006020808385031215614f0857600080fd5b82516001600160401b0380821115614f1f57600080fd5b818501915085601f830112614f3357600080fd5b815181811115614f4557614f45614910565b614f53848260051b01614992565b818152848101925060079190911b830184019087821115614f7357600080fd5b928401925b818410156144a4578388036080811215614f925760008081fd5b614f9a61494e565b85516001600160801b0381168114614fb25760008081fd5b81526060601f198301811315614fc85760008081fd5b614fd0614970565b925087870151614fdf816145f5565b8352604087810151614ff0816145f5565b848a015290870151906150028261463d565b8301528087019190915283526080939093019291840191614f78565b6060808252845182820181905260009190608090818501906020808a01865b8381101561508c57815180516001600160801b031686528301518051600290810b8588015281850151900b604080880191909152015162ffffff1687860152938501939082019060010161503d565b50508601889052506001600160a01b0386166040860152925061437f915050565b60008160001904831182151516156150c7576150c7614ad5565b500290565b6000826150e957634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161510057615100614ad5565b5060010190565b600082516151198184602087016149c2565b9190910192915050565b60208152600082518060208401526151428160408501602087016149c2565b601f01601f1916919091016040019291505056fea2646970667358221220adb013a9e79a8ceb4015a7c19526ce4fb46f3a37f27ab566f3bc6206f11008e164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "openTerm((uint24[],address,address,bool,address,int24,uint24,uint24,uint256,uint256,bytes,string),uint256)": {
        "notice": "do all neccesary step to initialize market making."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5982,
        "contract": "contracts/Terms.sol:Terms",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/Terms.sol:Terms",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/Terms.sol:Terms",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 200,
        "contract": "contracts/Terms.sol:Terms",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 243,
        "contract": "contracts/Terms.sol:Terms",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6099,
        "contract": "contracts/Terms.sol:Terms",
        "label": "vaults",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 6101,
        "contract": "contracts/Terms.sol:Terms",
        "label": "termTreasury",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 6103,
        "contract": "contracts/Terms.sol:Terms",
        "label": "manager",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 6105,
        "contract": "contracts/Terms.sol:Terms",
        "label": "emolument",
        "offset": 20,
        "slot": "53",
        "type": "t_uint16"
      },
      {
        "astId": 6108,
        "contract": "contracts/Terms.sol:Terms",
        "label": "resolver",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IArrakisV2Resolver)7023"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArrakisV2Resolver)7023": {
        "encoding": "inplace",
        "label": "contract IArrakisV2Resolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
