{
  "address": "0x2e7c05e24E96C3F34c5693bA8dedcDcF3530CEFC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2Factory",
          "name": "v2factory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "AddVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument1",
          "type": "uint256"
        }
      ],
      "name": "CloseTerm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument1",
          "type": "uint256"
        }
      ],
      "name": "DecreaseLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "DelegateVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "IncreaseLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint24[]",
          "name": "feeTiers",
          "type": "uint24[]"
        }
      ],
      "name": "LogAddPools",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "routers",
          "type": "address[]"
        }
      ],
      "name": "LogBlacklistRouters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "LogRemovePools",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "LogSetDelegate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creatorOrDelegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LogSetVaultData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creatorOrDelegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "strat",
          "type": "string"
        }
      ],
      "name": "LogSetVaultStratByName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "routers",
          "type": "address[]"
        }
      ],
      "name": "LogWhitelistRouters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sentBack",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawVaultBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "RemoveVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emolument1",
          "type": "uint256"
        }
      ],
      "name": "RenewTerm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldEmolument",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newEmolment",
          "type": "uint16"
        }
      ],
      "name": "SetEmolument",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "SetManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IArrakisV2Resolver",
          "name": "oldResolver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IArrakisV2Resolver",
          "name": "newResolver",
          "type": "address"
        }
      ],
      "name": "SetResolver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTermTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTermTreasury",
          "type": "address"
        }
      ],
      "name": "SetTermTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "SetupVault",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint24[]",
          "name": "feeTiers_",
          "type": "uint24[]"
        }
      ],
      "name": "addPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "routers_",
          "type": "address[]"
        }
      ],
      "name": "blacklistRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newManager_",
          "type": "address"
        }
      ],
      "name": "closeTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IArrakisV2",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "internalType": "struct DecreaseBalance",
          "name": "decreaseBalance_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount_",
          "type": "uint256"
        }
      ],
      "name": "decreaseLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegateByVaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emolument",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IArrakisV2",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "projectTknIsTknZero",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ],
          "internalType": "struct IncreaseBalance",
          "name": "increaseBalance_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount_",
          "type": "uint256"
        }
      ],
      "name": "increaseLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "termTreasury_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "emolument_",
          "type": "uint16"
        },
        {
          "internalType": "contract IArrakisV2Resolver",
          "name": "resolver_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24[]",
              "name": "feeTiers",
              "type": "uint24[]"
            },
            {
              "internalType": "contract IERC20",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "projectTknIsTknZero",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "datas",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "strat",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isBeacon",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct SetupPayload",
          "name": "setup_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount_",
          "type": "uint256"
        }
      ],
      "name": "openTerm",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "pools_",
          "type": "address[]"
        }
      ],
      "name": "removePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "renewTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IArrakisV2Resolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate_",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "emolument_",
          "type": "uint16"
        }
      ],
      "name": "setEmolument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager_",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2Resolver",
          "name": "resolver_",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "termTreasury_",
          "type": "address"
        }
      ],
      "name": "setTermTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "setVaultData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "strat_",
          "type": "string"
        }
      ],
      "name": "setVaultStratByName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v2factory",
      "outputs": [
        {
          "internalType": "contract IArrakisV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArrakisV2",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "routers_",
          "type": "address[]"
        }
      ],
      "name": "whitelistRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "withdrawVaultBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c7b992620178b5a40659c0e70c052a2d862abdf97d32326ec90faff2cacc0c9",
  "receipt": {
    "to": null,
    "from": "0x88215a2794ddC031439C72922EC8983bDE831c78",
    "contractAddress": "0x2e7c05e24E96C3F34c5693bA8dedcDcF3530CEFC",
    "transactionIndex": 23,
    "gasUsed": "4728157",
    "logsBloom": "0x
    "blockHash": "0xf7ffab4fe75aaa8674378122b3fdf3b1fefd1b4b3acd2262d2de3931b21e7970",
    "transactionHash": "0x5c7b992620178b5a40659c0e70c052a2d862abdf97d32326ec90faff2cacc0c9",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 34175039,
        "transactionHash": "0x5c7b992620178b5a40659c0e70c052a2d862abdf97d32326ec90faff2cacc0c9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000088215a2794ddc031439c72922ec8983bde831c78",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000029fe9597a9bf4a5000000000000000000000000000000000000000000000000a93e5102e96a061600000000000000000000000000000000000000000000336fb371cffc86f0f5d5000000000000000000000000000000000000000000000000a69e67a96ece117100000000000000000000000000000000000000000000336fb611b956018cea7a",
        "logIndex": 91,
        "blockHash": "0xf7ffab4fe75aaa8674378122b3fdf3b1fefd1b4b3acd2262d2de3931b21e7970"
      }
    ],
    "blockNumber": 34175039,
    "cumulativeGasUsed": "7872561",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xf5973723eb067F90276d9f9bE80F7C9De67d22af"],
  "numDeployments": 2,
  "solcInputHash": "1e49627be276f7948e39e9430e42125e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArrakisV2Factory\",\"name\":\"v2factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"AddVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument1\",\"type\":\"uint256\"}],\"name\":\"CloseTerm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24[]\",\"name\":\"feeTiers\",\"type\":\"uint24[]\"}],\"name\":\"LogAddPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"}],\"name\":\"LogBlacklistRouters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"LogRemovePools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"LogSetDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorOrDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogSetVaultData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorOrDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"strat\",\"type\":\"string\"}],\"name\":\"LogSetVaultStratByName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"}],\"name\":\"LogWhitelistRouters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentBack\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawVaultBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RemoveVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emolument1\",\"type\":\"uint256\"}],\"name\":\"RenewTerm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldEmolument\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newEmolment\",\"type\":\"uint16\"}],\"name\":\"SetEmolument\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"oldResolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"SetResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTermTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTermTreasury\",\"type\":\"address\"}],\"name\":\"SetTermTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"SetupVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint24[]\",\"name\":\"feeTiers_\",\"type\":\"uint24[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"routers_\",\"type\":\"address[]\"}],\"name\":\"blacklistRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newManager_\",\"type\":\"address\"}],\"name\":\"closeTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct DecreaseBalance\",\"name\":\"decreaseBalance_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateByVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emolument\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"projectTknIsTknZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"internalType\":\"struct IncreaseBalance\",\"name\":\"increaseBalance_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termTreasury_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"emolument_\",\"type\":\"uint16\"},{\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"resolver_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24[]\",\"name\":\"feeTiers\",\"type\":\"uint24[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"projectTknIsTknZero\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"datas\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"strat\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isBeacon\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct SetupPayload\",\"name\":\"setup_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"}],\"name\":\"openTerm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pools_\",\"type\":\"address[]\"}],\"name\":\"removePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"renewTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate_\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"emolument_\",\"type\":\"uint16\"}],\"name\":\"setEmolument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2Resolver\",\"name\":\"resolver_\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"termTreasury_\",\"type\":\"address\"}],\"name\":\"setTermTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"setVaultData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"strat_\",\"type\":\"string\"}],\"name\":\"setVaultStratByName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2factory\",\"outputs\":[{\"internalType\":\"contract IArrakisV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArrakisV2\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"routers_\",\"type\":\"address[]\"}],\"name\":\"whitelistRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawVaultBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"openTerm((uint24[],address,address,bool,address,uint256,uint256,bytes,string,bool,address),uint256)\":{\"notice\":\"do all neccesary step to initialize market making.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PALMTerms.sol\":\"PALMTerms\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@arrakisfi/v3-lib-0.8/contracts/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32dc7f9412ae8799057661df0de03007a39dbe18935f4f9025436c94dba7f4e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PALMTerms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2Factory} from \\\"./interfaces/IArrakisV2Factory.sol\\\";\\nimport {\\n    IERC20,\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IArrakisV2} from \\\"./interfaces/IArrakisV2.sol\\\";\\nimport {IPALMManager} from \\\"./interfaces/IPALMManager.sol\\\";\\nimport {PALMTermsStorage} from \\\"./abstracts/PALMTermsStorage.sol\\\";\\nimport {\\n    SetupPayload,\\n    IncreaseBalance,\\n    DecreaseBalance,\\n    Inits\\n} from \\\"./structs/SPALMTerms.sol\\\";\\nimport {InitializePayload} from \\\"./interfaces/IArrakisV2.sol\\\";\\nimport {\\n    _requireMintNotZero,\\n    _getInits,\\n    _requireTokenMatch,\\n    _requireIsOwnerOrDelegate,\\n    _requireIsOwner,\\n    _getEmolument,\\n    _requireProjectAllocationGtZero,\\n    _requireTknOrder,\\n    _burn\\n} from \\\"./functions/FPALMTerms.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract PALMTerms is PALMTermsStorage {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(IArrakisV2Factory v2factory_) PALMTermsStorage(v2factory_) {}\\n\\n    /// @notice do all neccesary step to initialize market making.\\n    // solhint-disable-next-line function-max-lines\\n    function openTerm(SetupPayload calldata setup_, uint256 mintAmount_)\\n        external\\n        payable\\n        override\\n        noLeftOver(setup_.token0, setup_.token1)\\n        returns (address vault)\\n    {\\n        _requireMintNotZero(mintAmount_);\\n        _requireProjectAllocationGtZero(\\n            setup_.projectTknIsTknZero,\\n            setup_.amount0,\\n            setup_.amount1\\n        );\\n        _requireTknOrder(address(setup_.token0), address(setup_.token1));\\n\\n        {\\n            Inits memory inits;\\n            (inits.init0, inits.init1) = _getInits(\\n                mintAmount_,\\n                setup_.amount0,\\n                setup_.amount1\\n            );\\n\\n            // Create vaultV2.\\n            vault = v2factory.deployVault(\\n                InitializePayload({\\n                    feeTiers: setup_.feeTiers,\\n                    token0: address(setup_.token0),\\n                    token1: address(setup_.token1),\\n                    owner: address(this),\\n                    init0: inits.init0,\\n                    init1: inits.init1,\\n                    manager: manager\\n                }),\\n                setup_.isBeacon\\n            );\\n        }\\n\\n        IArrakisV2 vaultV2 = IArrakisV2(vault);\\n\\n        _addVault(setup_.owner, vault);\\n\\n        if (setup_.delegate != address(0)) _setDelegate(vault, setup_.delegate);\\n        // Mint vaultV2 token.\\n\\n        // Call the manager to make it manage the new vault.\\n        IPALMManager(manager).addVault{value: msg.value}(\\n            vault,\\n            setup_.datas,\\n            setup_.strat\\n        );\\n\\n        // Transfer to termTreasury the project token emolment.\\n        setup_.token0.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            setup_.amount0\\n        );\\n        setup_.token1.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            setup_.amount1\\n        );\\n\\n        setup_.token0.approve(vault, setup_.amount0);\\n        setup_.token1.approve(vault, setup_.amount1);\\n\\n        vaultV2.setRestrictedMint(address(this));\\n\\n        vaultV2.mint(mintAmount_, address(this));\\n\\n        emit SetupVault(setup_.owner, vault);\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function increaseLiquidity(\\n        IncreaseBalance calldata increaseBalance_, // memory instead of calldata to set values\\n        uint256 mintAmount_\\n    )\\n        external\\n        override\\n        noLeftOver(\\n            increaseBalance_.vault.token0(),\\n            increaseBalance_.vault.token1()\\n        )\\n    {\\n        _requireMintNotZero(mintAmount_);\\n        _requireProjectAllocationGtZero(\\n            increaseBalance_.projectTknIsTknZero,\\n            increaseBalance_.amount0,\\n            increaseBalance_.amount1\\n        );\\n        _requireIsOwner(vaults[msg.sender], address(increaseBalance_.vault));\\n\\n        (uint256 amount0, uint256 amount1, ) = _burn(\\n            increaseBalance_.vault,\\n            address(this),\\n            resolver\\n        );\\n\\n        // Transfer to termTreasury the project token emolment.\\n        increaseBalance_.vault.token0().safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            increaseBalance_.amount0\\n        );\\n        increaseBalance_.vault.token1().safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            increaseBalance_.amount1\\n        );\\n\\n        increaseBalance_.vault.token0().approve(\\n            address(increaseBalance_.vault),\\n            increaseBalance_.amount0 + amount0\\n        );\\n\\n        increaseBalance_.vault.token1().approve(\\n            address(increaseBalance_.vault),\\n            increaseBalance_.amount1 + amount1\\n        );\\n\\n        {\\n            Inits memory inits;\\n            (inits.init0, inits.init1) = _getInits(\\n                mintAmount_,\\n                increaseBalance_.amount0 + amount0,\\n                increaseBalance_.amount1 + amount1\\n            );\\n\\n            increaseBalance_.vault.setInits(inits.init0, inits.init1);\\n        }\\n\\n        increaseBalance_.vault.mint(mintAmount_, address(this));\\n\\n        emit IncreaseLiquidity(msg.sender, address(increaseBalance_.vault));\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function renewTerm(IArrakisV2 vault_)\\n        external\\n        override\\n        noLeftOver(vault_.token0(), vault_.token1())\\n    {\\n        IPALMManager manager_ = IPALMManager(manager);\\n        require( // solhint-disable-next-line not-rely-on-time\\n            manager_.getVaultInfo(address(vault_)).termEnd < block.timestamp,\\n            \\\"PALMTerms: term not ended.\\\"\\n        );\\n        IPALMManager(manager).renewTerm(address(vault_));\\n\\n        (uint256 amount0, uint256 amount1, uint256 balance) = _burn(\\n            vault_,\\n            address(this),\\n            resolver\\n        );\\n\\n        uint256 emolumentAmt0 = _getEmolument(amount0, emolument);\\n        uint256 emolumentAmt1 = _getEmolument(amount1, emolument);\\n        vault_.token0().approve(address(vault_), amount0 - emolumentAmt0);\\n        vault_.token1().approve(address(vault_), amount1 - emolumentAmt1);\\n        if (emolumentAmt0 > 0)\\n            vault_.token0().safeTransfer(termTreasury, emolumentAmt0);\\n        if (emolumentAmt1 > 0)\\n            vault_.token1().safeTransfer(termTreasury, emolumentAmt1);\\n        {\\n            Inits memory inits;\\n            (inits.init0, inits.init1) = _getInits(\\n                balance,\\n                amount0 - emolumentAmt0,\\n                amount1 - emolumentAmt1\\n            );\\n\\n            vault_.setInits(inits.init0, inits.init1);\\n        }\\n\\n        vault_.mint(balance, address(this));\\n\\n        emit RenewTerm(address(vault_), emolumentAmt0, emolumentAmt1);\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function decreaseLiquidity(\\n        DecreaseBalance calldata decreaseBalance_,\\n        uint256 mintAmount_\\n    )\\n        external\\n        override\\n        noLeftOver(\\n            decreaseBalance_.vault.token0(),\\n            decreaseBalance_.vault.token1()\\n        )\\n    {\\n        _requireMintNotZero(mintAmount_);\\n        _requireIsOwner(vaults[msg.sender], address(decreaseBalance_.vault));\\n\\n        address me = address(this);\\n\\n        (uint256 amount0, uint256 amount1, ) = _burn(\\n            decreaseBalance_.vault,\\n            me,\\n            resolver\\n        );\\n        require(\\n            decreaseBalance_.amount0 < amount0,\\n            \\\"PALMTerms: send back amount0 > amount0\\\"\\n        );\\n        require(\\n            decreaseBalance_.amount1 < amount1,\\n            \\\"PALMTerms: send back amount1 > amount1\\\"\\n        );\\n\\n        uint256 emolumentAmt0 = _getEmolument(\\n            decreaseBalance_.amount0,\\n            emolument\\n        );\\n        uint256 emolumentAmt1 = _getEmolument(\\n            decreaseBalance_.amount1,\\n            emolument\\n        );\\n\\n        {\\n            IERC20 token0 = decreaseBalance_.vault.token0();\\n            IERC20 token1 = decreaseBalance_.vault.token1();\\n\\n            if (emolumentAmt0 > 0)\\n                token0.safeTransfer(termTreasury, emolumentAmt0);\\n            if (emolumentAmt1 > 0)\\n                token1.safeTransfer(termTreasury, emolumentAmt1);\\n\\n            token0.safeTransfer(\\n                decreaseBalance_.to,\\n                decreaseBalance_.amount0 - emolumentAmt0\\n            );\\n            token1.safeTransfer(\\n                decreaseBalance_.to,\\n                decreaseBalance_.amount1 - emolumentAmt1\\n            );\\n            token0.approve(\\n                address(decreaseBalance_.vault),\\n                amount0 - decreaseBalance_.amount0\\n            );\\n            token1.approve(\\n                address(decreaseBalance_.vault),\\n                amount1 - decreaseBalance_.amount1\\n            );\\n        }\\n        {\\n            (uint256 init0, uint256 init1) = _getInits(\\n                mintAmount_,\\n                amount0 - decreaseBalance_.amount0,\\n                amount1 - decreaseBalance_.amount1\\n            );\\n            decreaseBalance_.vault.setInits(init0, init1);\\n        }\\n\\n        decreaseBalance_.vault.mint(mintAmount_, me);\\n\\n        emit DecreaseLiquidity(\\n            msg.sender,\\n            address(decreaseBalance_.vault),\\n            emolumentAmt0,\\n            emolumentAmt1\\n        );\\n    }\\n\\n    // solhint-disable-next-line function-max-lines, code-complexity\\n    function closeTerm(\\n        IArrakisV2 vault_,\\n        address to_,\\n        address newOwner_,\\n        address newManager_\\n    )\\n        external\\n        override\\n        requireAddressNotZero(newOwner_)\\n        requireAddressNotZero(to_)\\n    {\\n        address vaultAddr = address(vault_);\\n        uint256 index = _requireIsOwner(vaults[msg.sender], vaultAddr);\\n\\n        delete vaults[msg.sender][index];\\n\\n        for (uint256 i = index; i < vaults[msg.sender].length - 1; i++) {\\n            vaults[msg.sender][i] = vaults[msg.sender][i + 1];\\n        }\\n        vaults[msg.sender].pop();\\n\\n        (uint256 amount0, uint256 amount1, ) = _burn(\\n            vault_,\\n            address(this),\\n            resolver\\n        );\\n\\n        uint256 emolumentAmt0 = _getEmolument(amount0, emolument);\\n        uint256 emolumentAmt1 = _getEmolument(amount1, emolument);\\n\\n        if (emolumentAmt0 > 0)\\n            vault_.token0().safeTransfer(termTreasury, emolumentAmt0);\\n        if (emolumentAmt1 > 0)\\n            vault_.token1().safeTransfer(termTreasury, emolumentAmt1);\\n\\n        if (amount0 > 0)\\n            vault_.token0().safeTransfer(to_, amount0 - emolumentAmt0);\\n        if (amount1 > 0)\\n            vault_.token1().safeTransfer(to_, amount1 - emolumentAmt1);\\n\\n        IPALMManager(manager).removeVault(vaultAddr, payable(to_));\\n        vault_.setManager(IPALMManager(newManager_));\\n        vault_.setRestrictedMint(address(0));\\n        vault_.transferOwnership(newOwner_);\\n\\n        emit CloseTerm(\\n            msg.sender,\\n            vaultAddr,\\n            amount0,\\n            amount1,\\n            to_,\\n            emolumentAmt0,\\n            emolumentAmt1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6f51c09943baff76b6dd112a069e0cebf6f763164766c32263f950ee52907e0a\",\"license\":\"MIT\"},\"contracts/abstracts/PALMTermsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IPALMTerms} from \\\"../interfaces/IPALMTerms.sol\\\";\\nimport {IArrakisV2Factory} from \\\"../interfaces/IArrakisV2Factory.sol\\\";\\nimport {IArrakisV2Resolver} from \\\"../interfaces/IArrakisV2Resolver.sol\\\";\\nimport {IArrakisV2} from \\\"../interfaces/IArrakisV2.sol\\\";\\nimport {IPALMManager} from \\\"../interfaces/IPALMManager.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {FullMath} from \\\"@arrakisfi/v3-lib-0.8/contracts/FullMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {\\n    _getInits,\\n    _requireTokenMatch,\\n    _requireIsOwnerOrDelegate,\\n    _requireIsOwner,\\n    _getEmolument,\\n    _requireProjectAllocationGtZero,\\n    _requireTknOrder,\\n    _burn\\n} from \\\"../functions/FPALMTerms.sol\\\";\\n\\n// solhint-disable-next-line max-states-count\\nabstract contract PALMTermsStorage is\\n    IPALMTerms,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    IArrakisV2Factory public immutable v2factory;\\n    mapping(address => address[]) public vaults;\\n    address public termTreasury;\\n    address public manager;\\n    uint16 public emolument;\\n    IArrakisV2Resolver public resolver;\\n    mapping(address => address) public delegateByVaults;\\n\\n    // #region no left over.\\n\\n    modifier noLeftOver(IERC20 token0_, IERC20 token1_) {\\n        uint256 token0Balance = token0_.balanceOf(address(this));\\n        uint256 token1Balance = token1_.balanceOf(address(this));\\n        _;\\n        uint256 leftOver0 = token0_.balanceOf(address(this)) - token0Balance;\\n        uint256 leftOver1 = token1_.balanceOf(address(this)) - token1Balance;\\n        if (leftOver0 > 0) token0_.transfer(msg.sender, leftOver0);\\n        if (leftOver1 > 0) token1_.transfer(msg.sender, leftOver1);\\n    }\\n\\n    modifier requireAddressNotZero(address addr) {\\n        require(addr != address(0), \\\"PALMTerms: address Zero\\\");\\n        _;\\n    }\\n\\n    // #endregion no left over.\\n\\n    constructor(IArrakisV2Factory v2factory_) {\\n        v2factory = v2factory_;\\n    }\\n\\n    function initialize(\\n        address owner_,\\n        address termTreasury_,\\n        uint16 emolument_,\\n        IArrakisV2Resolver resolver_\\n    ) external initializer {\\n        require(emolument < 10000, \\\"PALMTerms: emolument >= 100%.\\\");\\n        _transferOwnership(owner_);\\n        termTreasury = termTreasury_;\\n        emolument = emolument_;\\n        resolver = resolver_;\\n    }\\n\\n    // #region setter.\\n\\n    function setEmolument(uint16 emolument_) external onlyOwner {\\n        require(\\n            emolument_ < emolument,\\n            \\\"PALMTerms: new emolument >= old emolument\\\"\\n        );\\n        emit SetEmolument(emolument, emolument = emolument_);\\n    }\\n\\n    function setTermTreasury(address termTreasury_)\\n        external\\n        onlyOwner\\n        requireAddressNotZero(termTreasury_)\\n    {\\n        require(\\n            termTreasury != termTreasury_,\\n            \\\"PALMTerms: already term treasury\\\"\\n        );\\n        emit SetTermTreasury(termTreasury, termTreasury = termTreasury_);\\n    }\\n\\n    function setResolver(IArrakisV2Resolver resolver_)\\n        external\\n        onlyOwner\\n        requireAddressNotZero(address(resolver_))\\n    {\\n        require(\\n            address(resolver) != address(resolver_),\\n            \\\"PALMTerms: already resolver\\\"\\n        );\\n        emit SetResolver(resolver, resolver = resolver_);\\n    }\\n\\n    function setManager(address manager_)\\n        external\\n        override\\n        onlyOwner\\n        requireAddressNotZero(manager_)\\n    {\\n        require(manager_ != manager, \\\"PALMTerms: already manager\\\");\\n        emit SetManager(manager, manager = manager_);\\n    }\\n\\n    // #endregion setter.\\n\\n    // #region vault config as admin.\\n\\n    function addPools(IArrakisV2 vault_, uint24[] calldata feeTiers_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        address vaultAddr = address(vault_);\\n        _requireIsOwner(vaults[msg.sender], vaultAddr);\\n        vault_.addPools(feeTiers_);\\n\\n        emit LogAddPools(msg.sender, vaultAddr, feeTiers_);\\n    }\\n\\n    function removePools(IArrakisV2 vault_, address[] calldata pools_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        address vaultAddr = address(vault_);\\n        _requireIsOwner(vaults[msg.sender], vaultAddr);\\n        vault_.removePools(pools_);\\n\\n        emit LogRemovePools(msg.sender, vaultAddr, pools_);\\n    }\\n\\n    function whitelistRouters(IArrakisV2 vault_, address[] calldata routers_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        address vaultAddr = address(vault_);\\n        _requireIsOwner(vaults[msg.sender], vaultAddr);\\n        vault_.whitelistRouters(routers_);\\n\\n        emit LogWhitelistRouters(msg.sender, vaultAddr, routers_);\\n    }\\n\\n    function blacklistRouters(IArrakisV2 vault_, address[] calldata routers_)\\n        external\\n        override\\n        requireAddressNotZero(address(vault_))\\n    {\\n        address vaultAddr = address(vault_);\\n        _requireIsOwner(vaults[msg.sender], vaultAddr);\\n        vault_.blacklistRouters(routers_);\\n\\n        emit LogBlacklistRouters(msg.sender, vaultAddr, routers_);\\n    }\\n\\n    // #endregion vault config as admin.\\n\\n    // #region manager config as vault owner.\\n\\n    function setVaultData(address vault_, bytes calldata data_)\\n        external\\n        override\\n        requireAddressNotZero(vault_)\\n    {\\n        address vaultAddr = address(vault_);\\n        _requireIsOwnerOrDelegate(\\n            delegateByVaults[vault_],\\n            vaults[msg.sender],\\n            vaultAddr\\n        );\\n        IPALMManager(manager).setVaultData(vault_, data_);\\n\\n        emit LogSetVaultData(\\n            delegateByVaults[vault_] != address(0)\\n                ? delegateByVaults[vault_]\\n                : msg.sender,\\n            vaultAddr,\\n            data_\\n        );\\n    }\\n\\n    function setVaultStratByName(address vault_, string calldata strat_)\\n        external\\n        override\\n        requireAddressNotZero(vault_)\\n    {\\n        address vaultAddr = address(vault_);\\n        _requireIsOwnerOrDelegate(\\n            delegateByVaults[vault_],\\n            vaults[msg.sender],\\n            vaultAddr\\n        );\\n        IPALMManager(manager).setVaultStraByName(vault_, strat_);\\n\\n        emit LogSetVaultStratByName(\\n            delegateByVaults[vault_] != address(0)\\n                ? delegateByVaults[vault_]\\n                : msg.sender,\\n            vaultAddr,\\n            strat_\\n        );\\n    }\\n\\n    function setDelegate(address vault_, address delegate_) external override {\\n        address vaultAddr = address(vault_);\\n        _requireIsOwner(vaults[msg.sender], vaultAddr);\\n        _setDelegate(vault_, delegate_);\\n\\n        emit LogSetDelegate(msg.sender, vaultAddr, delegate_);\\n    }\\n\\n    function withdrawVaultBalance(\\n        address vault_,\\n        uint256 amount_,\\n        address payable to_\\n    ) external override requireAddressNotZero(vault_) {\\n        address vaultAddr = address(vault_);\\n        IPALMManager manager_ = IPALMManager(manager);\\n        (uint256 balance, , , , ) = manager_.vaults(vaultAddr);\\n        _requireIsOwner(vaults[msg.sender], vaultAddr);\\n        manager_.withdrawVaultBalance(vault_, amount_, to_);\\n\\n        emit LogWithdrawVaultBalance(msg.sender, vaultAddr, to_, balance);\\n    }\\n\\n    // #endregion manager config as vault owner.\\n\\n    // #region internals setter.\\n\\n    function _addVault(address creator_, address vault_) internal {\\n        address[] storage vaultsOfCreator = vaults[creator_];\\n\\n        for (uint256 i = 0; i < vaultsOfCreator.length; i++) {\\n            require(vaultsOfCreator[i] != vault_, \\\"PALMTerms: vault exist\\\");\\n        }\\n\\n        vaultsOfCreator.push(vault_);\\n        emit AddVault(creator_, vault_);\\n    }\\n\\n    function _setDelegate(address vault_, address delegate_) internal {\\n        require(\\n            delegateByVaults[vault_] != delegate_,\\n            \\\"PALMTerms: already delegate\\\"\\n        );\\n\\n        delegateByVaults[vault_] = delegate_;\\n        emit DelegateVault(msg.sender, vault_, delegate_);\\n    }\\n\\n    // #endregion internals setter.\\n}\\n\",\"keccak256\":\"0xa9f75074112efb887c15577d3473fa0d37ac6cbdbdb813fc6a1c13f73c467f62\",\"license\":\"MIT\"},\"contracts/functions/FPALMTerms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2, BurnLiquidity} from \\\"../interfaces/IArrakisV2.sol\\\";\\nimport {IArrakisV2Resolver} from \\\"../interfaces/IArrakisV2Resolver.sol\\\";\\nimport {ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {FullMath} from \\\"@arrakisfi/v3-lib-0.8/contracts/FullMath.sol\\\";\\n\\nfunction _burn(\\n    IArrakisV2 vault_,\\n    address me,\\n    IArrakisV2Resolver resolver\\n)\\n    returns (\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 balance\\n    )\\n{\\n    balance = IERC20(address(vault_)).balanceOf(me);\\n\\n    BurnLiquidity[] memory burnPayload = resolver.standardBurnParams(\\n        balance,\\n        vault_\\n    );\\n\\n    (amount0, amount1) = vault_.burn(burnPayload, balance, me);\\n}\\n\\nfunction _getInits(\\n    uint256 mintAmount_,\\n    uint256 amount0_,\\n    uint256 amount1_\\n) pure returns (uint256 init0, uint256 init1) {\\n    init0 = FullMath.mulDiv(amount0_, 1e18, mintAmount_);\\n    init1 = FullMath.mulDiv(amount1_, 1e18, mintAmount_);\\n}\\n\\nfunction _requireTokenMatch(\\n    IArrakisV2 vault_,\\n    IERC20 token0_,\\n    IERC20 token1_\\n) view {\\n    require(\\n        address(token0_) == address(vault_.token0()),\\n        \\\"PALMTerms: wrong token0.\\\"\\n    );\\n    require(\\n        address(token1_) == address(vault_.token1()),\\n        \\\"PALMTerms: wrong token1.\\\"\\n    );\\n}\\n\\nfunction _requireIsOwnerOrDelegate(\\n    address delegate_,\\n    address[] memory vaults_,\\n    address vault_\\n) view {\\n    if (delegate_ != address(0)) {\\n        require(msg.sender == delegate_, \\\"PALMTerms: no delegate\\\");\\n    } else _requireIsOwner(vaults_, vault_);\\n}\\n\\nfunction _requireIsOwner(address[] memory vaults_, address vault_)\\n    pure\\n    returns (uint256 index)\\n{\\n    bool isOwner;\\n    (isOwner, index) = _isOwnerOfVault(vaults_, address(vault_));\\n    require(isOwner, \\\"PALMTerms: not owner\\\");\\n}\\n\\nfunction _isOwnerOfVault(address[] memory vaults_, address vault_)\\n    pure\\n    returns (bool, uint256 index)\\n{\\n    for (index = 0; index < vaults_.length; index++) {\\n        if (vaults_[index] == vault_) return (true, index);\\n    }\\n    return (false, 0);\\n}\\n\\nfunction _getEmolument(uint256 projectTokenAllocation_, uint16 emolument_)\\n    pure\\n    returns (uint256)\\n{\\n    return (projectTokenAllocation_ * emolument_) / 10000;\\n}\\n\\nfunction _requireProjectAllocationGtZero(\\n    bool projectTknIsTknZero_,\\n    uint256 amount0_,\\n    uint256 amount1_\\n) pure {\\n    require(\\n        projectTknIsTknZero_ ? amount0_ > 0 : amount1_ > 0,\\n        \\\"PALMTerms: no project token allocation.\\\"\\n    );\\n}\\n\\nfunction _requireMintNotZero(uint256 mintAmount_) pure {\\n    require(mintAmount_ > 0, \\\"PALMTerms: mintAmount zero.\\\");\\n}\\n\\nfunction _requireTknOrder(address token0_, address token1_) pure {\\n    require(token0_ < token1_, \\\"PALMTerms: tokens order inverted.\\\");\\n}\\n\",\"keccak256\":\"0xcdc885f998a193aeca048bfbce9773f4d47c6f9e933f819fca7a7bbe27a1a698\",\"license\":\"MIT\"},\"contracts/interfaces/IArrakisV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {\\n    IUniswapV3Factory\\n} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPALMManager} from \\\"./IPALMManager.sol\\\";\\n\\n// structs copied from v2-core/contracts/structs/SVaultV2.sol\\nstruct PositionLiquidity {\\n    uint128 liquidity;\\n    Range range;\\n}\\n\\nstruct SwapPayload {\\n    bytes payload;\\n    address pool;\\n    address router;\\n    uint256 amountIn;\\n    uint256 expectedMinReturn;\\n    bool zeroForOne;\\n}\\n\\nstruct Range {\\n    int24 lowerTick;\\n    int24 upperTick;\\n    uint24 feeTier;\\n}\\n\\nstruct Rebalance {\\n    PositionLiquidity[] removes;\\n    PositionLiquidity[] deposits;\\n    SwapPayload swap;\\n    uint256 minDeposit0;\\n    uint256 minDeposit1;\\n}\\n\\nstruct InitializePayload {\\n    uint24[] feeTiers;\\n    address token0;\\n    address token1;\\n    address owner;\\n    uint256 init0;\\n    uint256 init1;\\n    address manager;\\n}\\n\\nstruct BurnLiquidity {\\n    uint128 liquidity;\\n    Range range;\\n}\\n\\ninterface IArrakisV2 {\\n    function mint(uint256 mintAmount_, address receiver_)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function rebalance(\\n        Range[] calldata ranges_,\\n        Rebalance calldata rebalanceParams_,\\n        Range[] calldata rangesToRemove_\\n    ) external;\\n\\n    function burn(\\n        BurnLiquidity[] calldata burns_,\\n        uint256 burnAmount_,\\n        address receiver_\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function setRestrictedMint(address minter) external;\\n\\n    function setInits(uint256 init0_, uint256 init1_) external;\\n\\n    function addPools(uint24[] calldata feeTiers_) external;\\n\\n    function removePools(address[] calldata pools_) external;\\n\\n    function whitelistRouters(address[] calldata routers_) external;\\n\\n    function blacklistRouters(address[] calldata routers_) external;\\n\\n    function setManager(IPALMManager manager_) external;\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function rangeExist(Range calldata range_)\\n        external\\n        view\\n        returns (bool ok, uint256 index);\\n\\n    function owner() external view returns (address);\\n\\n    function manager() external view returns (IPALMManager);\\n}\\n\",\"keccak256\":\"0xdf6d62fc8675397a4f2c812e027f3a0907826a7255bbfedae58c63d3fd7de29f\",\"license\":\"MIT\"},\"contracts/interfaces/IArrakisV2Beacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IArrakisV2Beacon {\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd0fe5063e596396ec8ed170ae4ae9df2f118a2afa24b57a5ed9c044964d2c646\",\"license\":\"MIT\"},\"contracts/interfaces/IArrakisV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2Beacon} from \\\"./IArrakisV2Beacon.sol\\\";\\nimport {InitializePayload} from \\\"./IArrakisV2.sol\\\";\\n\\ninterface IArrakisV2Factory {\\n    event VaultCreated(address indexed manager, address indexed vault);\\n\\n    event InitFactory(address owner);\\n\\n    function deployVault(InitializePayload calldata params_, bool isBeacon_)\\n        external\\n        returns (address vault);\\n\\n    // #region view functions\\n\\n    function version() external view returns (string memory);\\n\\n    function arrakisV2Beacon() external view returns (IArrakisV2Beacon);\\n\\n    function numVaults() external view returns (uint256);\\n\\n    function vaults() external view returns (address[] memory);\\n\\n    function getProxyAdmin(address proxy) external view returns (address);\\n\\n    function getProxyImplementation(address proxy)\\n        external\\n        view\\n        returns (address);\\n\\n    // #endregion view functions\\n}\\n\",\"keccak256\":\"0x3ebc9b80a082e1a61402fef574b4bb59da62bc342ca535cda2fb80bfc76d76f0\",\"license\":\"MIT\"},\"contracts/interfaces/IArrakisV2Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2, Rebalance, Range, BurnLiquidity} from \\\"./IArrakisV2.sol\\\";\\n\\n// structs copied from v2-core/contracts/structs/SVaultV2.sol\\nstruct RangeWeight {\\n    Range range;\\n    uint256 weight; // should be between 0 and 100%\\n}\\n\\ninterface IArrakisV2Resolver {\\n    function standardRebalance(\\n        RangeWeight[] memory rangeWeights_,\\n        IArrakisV2 vaultV2_\\n    ) external view returns (Rebalance memory rebalanceParams);\\n\\n    function standardBurnParams(uint256 amountToBurn_, IArrakisV2 vaultV2_)\\n        external\\n        view\\n        returns (BurnLiquidity[] memory burns);\\n\\n    function getMintAmounts(\\n        IArrakisV2 vaultV2_,\\n        uint256 amount0Max_,\\n        uint256 amount1Max_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 mintAmount\\n        );\\n}\\n\",\"keccak256\":\"0x4dc40064e23d7a8e547cd3aa3d48b5e93ac8338a416085dd6b6da2f915df2259\",\"license\":\"MIT\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IManager {\\n    function managerFeeBPS() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x479e9b9e12e1cb14cc76e7e4540afd81393e3c5ee6e28fc35db6c09e67579a61\",\"license\":\"MIT\"},\"contracts/interfaces/IPALMManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {Rebalance, Range} from \\\"./IArrakisV2.sol\\\";\\nimport {IManager} from \\\"./IManager.sol\\\";\\nimport {VaultInfo} from \\\"../structs/SPALMManager.sol\\\";\\n\\ninterface IPALMManager is IManager {\\n    event AddVault(address indexed vault, bytes datas, string strat);\\n\\n    event RemoveVault(address indexed vault, uint256 sendBack);\\n\\n    event SetVaultData(address indexed vault, bytes data);\\n\\n    event SetVaultStrat(address indexed vault, bytes32 strat);\\n\\n    event WhitelistStrat(address indexed manager, string strat);\\n\\n    event AddOperators(address indexed manager, address[] operators);\\n\\n    event RemoveOperators(address indexed manager, address[] operators);\\n\\n    event UpdateVaultBalance(address indexed vault, uint256 newBalance);\\n\\n    event SetTermEnd(\\n        address indexed vault,\\n        uint256 oldtermDuration,\\n        uint256 newtermDuration\\n    );\\n\\n    event WithdrawVaultBalance(\\n        address indexed vault,\\n        uint256 amount,\\n        address to,\\n        uint256 newBalance\\n    );\\n\\n    event RebalanceVault(address indexed vault, uint256 newBalance);\\n\\n    // ======== GELATOFIED FUNCTIONS ========\\n    function rebalance(\\n        address vault_,\\n        Range[] calldata ranges_,\\n        Rebalance calldata rebalanceParams_,\\n        Range[] calldata rangesToRemove_,\\n        uint256 feeAmount_\\n    ) external;\\n\\n    // ======= PERMISSIONED OWNER FUNCTIONS =====\\n    function withdrawVaultBalance(\\n        address vault_,\\n        uint256 amount_,\\n        address payable to_\\n    ) external;\\n\\n    function addVault(\\n        address vault_,\\n        bytes calldata datas_,\\n        string calldata strat_\\n    ) external payable;\\n\\n    function removeVault(address vault_, address payable to_) external;\\n\\n    function setVaultData(address vault_, bytes calldata data_) external;\\n\\n    function setVaultStraByName(address vault_, string calldata strat_)\\n        external;\\n\\n    function addOperators(address[] calldata operators_) external;\\n\\n    function removeOperators(address[] calldata operators_) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ======= PUBLIC FUNCTIONS =====\\n    function fundVaultBalance(address vault_) external payable;\\n\\n    function renewTerm(address vault_) external;\\n\\n    function getVaultInfo(address vault_)\\n        external\\n        view\\n        returns (VaultInfo memory);\\n\\n    function getWhitelistedStrat() external view returns (bytes32[] memory);\\n\\n    function vaults(address vault_)\\n        external\\n        view\\n        returns (\\n            uint256 balance,\\n            uint256 lastBalance,\\n            bytes memory datas,\\n            bytes32 strat,\\n            uint256 termEnd\\n        );\\n}\\n\",\"keccak256\":\"0x99bcc5ea1d928c31f32ded8079b794883772303ebd04cdec7026be9a08805245\",\"license\":\"MIT\"},\"contracts/interfaces/IPALMTerms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2Factory} from \\\"./IArrakisV2Factory.sol\\\";\\nimport {IArrakisV2Resolver} from \\\"./IArrakisV2Resolver.sol\\\";\\nimport {IArrakisV2} from \\\"./IArrakisV2.sol\\\";\\nimport {IPALMManager} from \\\"./IPALMManager.sol\\\";\\nimport {\\n    SetupPayload,\\n    IncreaseBalance,\\n    DecreaseBalance\\n} from \\\"../structs/SPALMTerms.sol\\\";\\n\\ninterface IPALMTerms {\\n    // #region events.\\n\\n    event SetEmolument(uint16 oldEmolument, uint16 newEmolment);\\n    event SetTermTreasury(address oldTermTreasury, address newTermTreasury);\\n    event SetManager(address oldManager, address newManager);\\n    event SetResolver(\\n        IArrakisV2Resolver oldResolver,\\n        IArrakisV2Resolver newResolver\\n    );\\n\\n    event AddVault(address creator, address vault);\\n    event RemoveVault(address creator, address vault);\\n    event DelegateVault(address creator, address vault, address delegate);\\n\\n    event SetupVault(address creator, address vault);\\n    event IncreaseLiquidity(address creator, address vault);\\n    event RenewTerm(address vault, uint256 emolument0, uint256 emolument1);\\n    event DecreaseLiquidity(\\n        address creator,\\n        address vault,\\n        uint256 emolument0,\\n        uint256 emolument1\\n    );\\n    event CloseTerm(\\n        address creator,\\n        address vault,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address to,\\n        uint256 emolument0,\\n        uint256 emolument1\\n    );\\n\\n    // #region vault modification events.\\n\\n    event LogAddPools(address creator, address vault, uint24[] feeTiers);\\n\\n    event LogRemovePools(address creator, address vault, address[] pools);\\n\\n    event LogWhitelistRouters(\\n        address creator,\\n        address vault,\\n        address[] routers\\n    );\\n\\n    event LogBlacklistRouters(\\n        address creator,\\n        address vault,\\n        address[] routers\\n    );\\n\\n    // #endregion vault modification events.\\n\\n    // #region PALMManager interaction events.\\n\\n    event LogSetVaultData(address creatorOrDelegate, address vault, bytes data);\\n\\n    event LogSetVaultStratByName(\\n        address creatorOrDelegate,\\n        address vault,\\n        string strat\\n    );\\n\\n    event LogSetDelegate(address creator, address vault, address delegate);\\n\\n    event LogWithdrawVaultBalance(\\n        address creator,\\n        address vault,\\n        address to,\\n        uint256 sentBack\\n    );\\n\\n    // #endregion PALMManager interaction events.\\n\\n    // #endregion events.\\n\\n    function openTerm(SetupPayload calldata setup_, uint256 mintAmount_)\\n        external\\n        payable\\n        returns (address vault);\\n\\n    function increaseLiquidity(\\n        IncreaseBalance calldata increaseBalance_,\\n        uint256 mintAmount_\\n    ) external;\\n\\n    function renewTerm(IArrakisV2 vault_) external;\\n\\n    function decreaseLiquidity(\\n        DecreaseBalance calldata decreaseBalance_,\\n        uint256 mintAmount_\\n    ) external;\\n\\n    function closeTerm(\\n        IArrakisV2 vault_,\\n        address to_,\\n        address newOwner_,\\n        address newManager_\\n    ) external;\\n\\n    // #region Vault configuration functions.\\n\\n    function addPools(IArrakisV2 vault_, uint24[] calldata feeTiers_) external;\\n\\n    function removePools(IArrakisV2 vault_, address[] calldata pools_) external;\\n\\n    function whitelistRouters(IArrakisV2 vault_, address[] calldata routers_)\\n        external;\\n\\n    function blacklistRouters(IArrakisV2 vault_, address[] calldata routers_)\\n        external;\\n\\n    // #endregion Vault configuration functions.\\n\\n    // #region PALMManager configuration functions.\\n\\n    function setVaultData(address vault_, bytes calldata data_) external;\\n\\n    function setVaultStratByName(address vault_, string calldata strat_)\\n        external;\\n\\n    function setDelegate(address vault_, address delegate_) external;\\n\\n    function withdrawVaultBalance(\\n        address vault_,\\n        uint256 amount_,\\n        address payable to_\\n    ) external;\\n\\n    function setManager(address manager_) external;\\n\\n    // #endregion PALMManager configuration functions.\\n\\n    function v2factory() external view returns (IArrakisV2Factory);\\n\\n    function termTreasury() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function emolument() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xdbd08a0bebfcbc3842f66c5050be4114fc1651e4378b197bcf275bd102cfa773\",\"license\":\"MIT\"},\"contracts/structs/SPALMManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct VaultInfo {\\n    uint256 balance; // prepaid credit for rebalance\\n    uint256 lastRebalance; // timestamp of the last rebalance\\n    bytes datas; // custom bytes that can used to store data needed for rebalance.\\n    bytes32 strat; // strat type\\n    uint256 termEnd; // expiry of the Market Making terms.\\n}\\n\",\"keccak256\":\"0x5d052e1b478df1c74058866224323563680c27c182001d8cb2f59e2c13fad3f0\",\"license\":\"MIT\"},\"contracts/structs/SPALMTerms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IArrakisV2} from \\\"../interfaces/IArrakisV2.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct SetupPayload {\\n    // Initialized Payload properties\\n    uint24[] feeTiers;\\n    IERC20 token0;\\n    IERC20 token1;\\n    bool projectTknIsTknZero;\\n    address owner;\\n    uint256 amount0;\\n    uint256 amount1;\\n    bytes datas;\\n    string strat;\\n    bool isBeacon;\\n    address delegate;\\n}\\n\\nstruct IncreaseBalance {\\n    IArrakisV2 vault;\\n    bool projectTknIsTknZero;\\n    uint256 amount0;\\n    uint256 amount1;\\n}\\n\\nstruct DecreaseBalance {\\n    IArrakisV2 vault;\\n    uint256 amount0;\\n    uint256 amount1;\\n    address to;\\n}\\n\\nstruct Inits {\\n    uint256 init0;\\n    uint256 init1;\\n}\\n\",\"keccak256\":\"0x5556999b7af9df5df17a3575cf220089360c4e37203644d94727f4531b475d8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200552838038062005528833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b60805161548d6200009b600039600081816102820152612786015261548d6000f3fe6080604052600436106101b75760003560e01c80637bbfc69e116100ec578063bfd7e7521161008a578063ea6b186c11610064578063ea6b186c14610500578063eaaa929914610520578063f2cb118a14610540578063f2fde38b1461056057600080fd5b8063bfd7e752146104a0578063c28d4647146104c0578063d0ebdbe7146104e057600080fd5b8063ac484c55116100c6578063ac484c551461042d578063ae5e24c214610440578063b1ffa58214610460578063b33d46dc1461048057600080fd5b80637bbfc69e146103cf57806386de1467146103ef5780638da5cb5b1461040f57600080fd5b80633ce3b0d2116101595780635c873849116101335780635c8738491461035a57806368b6702e1461037a578063715018a61461039a5780637407e38c146103af57600080fd5b80633ce3b0d2146102e4578063481c6a751461031a5780634e543b261461033a57600080fd5b806326c1a7b11161019557806326c1a7b11461023b578063330807a914610270578063332d28ef146102a45780633a91f42a146102c457600080fd5b806304f3bcec146101bc57806319549dc6146101f957806319e050d01461021b575b600080fd5b3480156101c857600080fd5b50609a546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b5061021961021436600461480e565b610580565b005b34801561022757600080fd5b50610219610236366004614862565b6106c7565b34801561024757600080fd5b5060995461025d90600160a01b900461ffff1681565b60405161ffff90911681526020016101f0565b34801561027c57600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b057600080fd5b506102196102bf366004614897565b610fe8565b3480156102d057600080fd5b506102196102df366004614903565b61198b565b3480156102f057600080fd5b506101dc6102ff366004614862565b609b602052600090815260409020546001600160a01b031681565b34801561032657600080fd5b506099546101dc906001600160a01b031681565b34801561034657600080fd5b50610219610355366004614862565b611b13565b34801561036657600080fd5b5061021961037536600461494a565b611bfe565b34801561038657600080fd5b50610219610395366004614983565b611ccc565b3480156103a657600080fd5b50610219612277565b3480156103bb57600080fd5b506102196103ca366004614903565b61228b565b3480156103db57600080fd5b506101dc6103ea3660046149df565b6123e2565b3480156103fb57600080fd5b5061021961040a366004614a0b565b61241a565b34801561041b57600080fd5b506033546001600160a01b03166101dc565b6101dc61043b366004614a4d565b6125f3565b34801561044c57600080fd5b5061021961045b36600461480e565b612e00565b34801561046c57600080fd5b5061021961047b366004614aa0565b612f2d565b34801561048c57600080fd5b5061021961049b366004614adf565b6130ea565b3480156104ac57600080fd5b506102196104bb366004614862565b6131c3565b3480156104cc57600080fd5b506102196104db36600461480e565b6132a6565b3480156104ec57600080fd5b506102196104fb366004614862565b6133d3565b34801561050c57600080fd5b506098546101dc906001600160a01b031681565b34801561052c57600080fd5b5061021961053b36600461480e565b6134b7565b34801561054c57600080fd5b5061021961055b366004614897565b6135e4565b34801561056c57600080fd5b5061021961057b366004614862565b613ce2565b826001600160a01b0381166105b05760405162461bcd60e51b81526004016105a790614afa565b60405180910390fd5b3360009081526097602090815260409182902080548351818402810184019094528084528793610622939092919083018282801561061757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105f9575b505050505082613d5b565b5060405163a5ff1dc760e01b81526001600160a01b0386169063a5ff1dc7906106519087908790600401614b7a565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b505050507fa5217cdb9444a5f916bdf40d5cd8f7cb42d2a5f877ea5945648259eae1a3e0d7338286866040516106b89493929190614b8e565b60405180910390a15050505050565b806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190614bc5565b816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190614bc5565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190614be2565b6099546040516390229af760e01b81526001600160a01b038881166004830152929350911690429082906390229af790602401600060405180830381865afa1580156108b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108dc9190810190614d3c565b608001511061092d5760405162461bcd60e51b815260206004820152601a60248201527f50414c4d5465726d733a207465726d206e6f7420656e6465642e00000000000060448201526064016105a7565b60995460405163019e050d60e41b81526001600160a01b038881166004830152909116906319e050d090602401600060405180830381600087803b15801561097457600080fd5b505af1158015610988573d6000803e3d6000fd5b5050609a546000925082915081906109ac908a9030906001600160a01b0316613db7565b92509250925060006109ce84609960149054906101000a900461ffff16613f29565b905060006109ec84609960149054906101000a900461ffff16613f29565b90508a6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190614bc5565b6001600160a01b031663095ea7b38c610a698589614de9565b6040518363ffffffff1660e01b8152600401610a86929190614e00565b6020604051808303816000875af1158015610aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac99190614e27565b508a6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c9190614bc5565b6001600160a01b031663095ea7b38c610b458488614de9565b6040518363ffffffff1660e01b8152600401610b62929190614e00565b6020604051808303816000875af1158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190614e27565b508115610c3857610c38609860009054906101000a90046001600160a01b0316838d6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c289190614bc5565b6001600160a01b03169190613f4d565b8015610c9657610c96609860009054906101000a90046001600160a01b0316828d6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b6040805180820190915260008082526020820152610cc784610cb88589614de9565b610cc28589614de9565b613fa8565b60208301819052818352604051633f7b613560e01b81526001600160a01b038f1692633f7b613592610d0492600401918252602082015260400190565b600060405180830381600087803b158015610d1e57600080fd5b505af1158015610d32573d6000803e3d6000fd5b50506040516394bf804d60e01b8152600481018790523060248201526001600160a01b038f1693506394bf804d9250604401905060408051808303816000875af1158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da89190614e44565b5050604080516001600160a01b038d168152602081018490529081018290527f59e2f591f61aa724c8984e092e32f4f83dcd07cbf01b88c0c79e8dd0adde82069060600160405180910390a150506040516370a0823160e01b8152306004820152600094508693506001600160a01b03891692506370a082319150602401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190614be2565b610e719190614de9565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190614be2565b610eeb9190614de9565b90508115610f665760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90610f219033908690600401614e00565b6020604051808303816000875af1158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190614e27565b505b8015610fdf5760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb90610f9a9033908590600401614e00565b6020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190614e27565b505b50505050505050565b610ff56020830183614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190614bc5565b6110636020840184614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c49190614bc5565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f9190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d9190614be2565b90506111a885613fdd565b336000908152609760209081526040918290208054835181840281018401909452808452611223939283018282801561120a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111ec575b5061121e9350505060208a01905089614862565b613d5b565b503060008061124b61123860208b018b614862565b609a5485906001600160a01b0316613db7565b5091509150818960200135106112b25760405162461bcd60e51b815260206004820152602660248201527f50414c4d5465726d733a2073656e64206261636b20616d6f756e7430203e206160448201526506d6f756e74360d41b60648201526084016105a7565b808960400135106113145760405162461bcd60e51b815260206004820152602660248201527f50414c4d5465726d733a2073656e64206261636b20616d6f756e7431203e20616044820152656d6f756e743160d01b60648201526084016105a7565b60006113348a60200135609960149054906101000a900461ffff16613f29565b905060006113568b60400135609960149054906101000a900461ffff16613f29565b9050600061136760208d018d614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190614bc5565b905060006113d960208e018e614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a9190614bc5565b9050831561145c5760985461145c906001600160a01b03848116911686613f4d565b821561147c5760985461147c906001600160a01b03838116911685613f4d565b6114b38d60600160208101906114929190614862565b858f602001356114a29190614de9565b6001600160a01b0385169190613f4d565b6114ea8d60600160208101906114c99190614862565b848f604001356114d99190614de9565b6001600160a01b0384169190613f4d565b816001600160a01b031663095ea7b38e600001602081019061150c9190614862565b8f602001358961151c9190614de9565b6040518363ffffffff1660e01b8152600401611539929190614e00565b6020604051808303816000875af1158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c9190614e27565b50806001600160a01b031663095ea7b38e600001602081019061159f9190614862565b8f60400135886115af9190614de9565b6040518363ffffffff1660e01b81526004016115cc929190614e00565b6020604051808303816000875af11580156115eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160f9190614e27565b5050506000806116398c8e60200135886116299190614de9565b8f6040013588610cc29190614de9565b909250905061164b60208e018e614862565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b15801561169657600080fd5b505af11580156116aa573d6000803e3d6000fd5b506116c09450505060208e0191508d9050614862565b6040516394bf804d60e01b8152600481018c90526001600160a01b03878116602483015291909116906394bf804d9060440160408051808303816000875af1158015611710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117349190614e44565b507fc00aed996acfb0673742e8911b6ff20f93754b815a7540b7e761d7429ffa08ab90503361176660208e018e614862565b604080516001600160a01b03938416815292909116602083015281018490526060810183905260800160405180910390a150506040516370a0823160e01b8152306004820152600093508592506001600160a01b03881691506370a08231906024015b602060405180830381865afa1580156117e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a9190614be2565b6118149190614de9565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118849190614be2565b61188e9190614de9565b905081156119095760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906118c49033908690600401614e00565b6020604051808303816000875af11580156118e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119079190614e27565b505b8015610fdd5760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb9061193d9033908590600401614e00565b6020604051808303816000875af115801561195c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119809190614e27565b505050505050505050565b826001600160a01b0381166119b25760405162461bcd60e51b81526004016105a790614afa565b6001600160a01b038085166000908152609b6020908152604080832054338452609783529281902080548251818502810185019093528083528995611a37951693830182828015611a2c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a0e575b50505050508361402d565b60995460405163152f2bb760e01b81526001600160a01b039091169063152f2bb790611a6b90889088908890600401614e91565b600060405180830381600087803b158015611a8557600080fd5b505af1158015611a99573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b60205260409020547f01e616d15b59874215258e3e3646672746d2fafa2a88ab82d89c49991bcdbbe99116611ae45733611b00565b6001600160a01b038087166000908152609b6020526040902054165b8286866040516106b89493929190614ebf565b611b1b61409d565b806001600160a01b038116611b425760405162461bcd60e51b81526004016105a790614afa565b609a546001600160a01b03808416911603611b9f5760405162461bcd60e51b815260206004820152601b60248201527f50414c4d5465726d733a20616c7265616479207265736f6c766572000000000060448201526064016105a7565b609a80546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f6cb59c795917577ec693948e42535bd42e4c7784893c9fff6d7b7102f64a1d7291015b60405180910390a15050565b3360009081526097602090815260409182902080548351818402810184019094528084528593611c6e9390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b50611c7983836140f7565b604080513381526001600160a01b0380841660208301528416918101919091527f0bcba02da0cdd1a6aac8553dd2668cbc3dae93fab8859665ba2d470a2ba8f445906060015b60405180910390a1505050565b816001600160a01b038116611cf35760405162461bcd60e51b81526004016105a790614afa565b836001600160a01b038116611d1a5760405162461bcd60e51b81526004016105a790614afa565b33600090815260976020908152604080832080548251818502810185019093528083528a9493611d8b93929190830182828015611d8057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d62575b505050505083613d5b565b33600090815260976020526040902080549192509082908110611db057611db0614eec565b600091825260209091200180546001600160a01b0319169055805b33600090815260976020526040902054611de790600190614de9565b811015611e8c57336000908152609760205260409020611e08826001614f02565b81548110611e1857611e18614eec565b60009182526020808320909101543383526097909152604090912080546001600160a01b039092169183908110611e5157611e51614eec565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580611e8481614f1a565b915050611dcb565b50336000908152609760205260409020805480611eab57611eab614f33565b600082815260208120820160001990810180546001600160a01b0319169055909101909155609a548190611eeb908b9030906001600160a01b0316613db7565b50915091506000611f0c83609960149054906101000a900461ffff16613f29565b90506000611f2a83609960149054906101000a900461ffff16613f29565b90508115611f8a57611f8a609860009054906101000a90046001600160a01b0316838e6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b8015611fe857611fe8609860009054906101000a90046001600160a01b0316828e6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b831561203a5761203a8b611ffc8487614de9565b8e6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b821561208c5761208c8b61204e8386614de9565b8e6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b60995460405163b7d3824360e01b81526001600160a01b0388811660048301528d811660248301529091169063b7d3824390604401600060405180830381600087803b1580156120db57600080fd5b505af11580156120ef573d6000803e3d6000fd5b505060405163d0ebdbe760e01b81526001600160a01b038c811660048301528f16925063d0ebdbe79150602401600060405180830381600087803b15801561213657600080fd5b505af115801561214a573d6000803e3d6000fd5b5050604051630d6e663160e01b8152600060048201526001600160a01b038f169250630d6e66319150602401600060405180830381600087803b15801561219057600080fd5b505af11580156121a4573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038d811660048301528f16925063f2fde38b9150602401600060405180830381600087803b1580156121eb57600080fd5b505af11580156121ff573d6000803e3d6000fd5b5050604080513381526001600160a01b038a81166020830152818301899052606082018890528f16608082015260a0810186905260c0810185905290517f0d52372e455cc3305a983c590d790ca4175987649a8e2959ed7dd506387961b993509081900360e0019150a1505050505050505050505050565b61227f61409d565b61228960006141d0565b565b826001600160a01b0381166122b25760405162461bcd60e51b81526004016105a790614afa565b6001600160a01b038085166000908152609b6020908152604080832054338452609783529281902080548251818502810185019093528083528995612335951693830182828015611a2c576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a0e5750505050508361402d565b609954604051631d01f8e360e21b81526001600160a01b0390911690637407e38c9061236990889088908890600401614e91565b600060405180830381600087803b15801561238357600080fd5b505af1158015612397573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b60205260409020547fdcd296d17559776406261383f6e29108f53a3ca0edf2041fa6a75335e59c18e69116611ae45733611b00565b609760205281600052604060002081815481106123fe57600080fd5b6000918252602090912001546001600160a01b03169150829050565b826001600160a01b0381166124415760405162461bcd60e51b81526004016105a790614afa565b609954604051632988bb9f60e21b81526001600160a01b03808716600483015286921690600090829063a622ee7c90602401600060405180830381865afa158015612490573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124b89190810190614f49565b505033600090815260976020908152604091829020805483518184028101840190945280845295965061252e95929450925083018282801561252357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612505575b505050505084613d5b565b506040516386de146760e01b81526001600160a01b0388811660048301526024820188905286811660448301528316906386de146790606401600060405180830381600087803b15801561258157600080fd5b505af1158015612595573d6000803e3d6000fd5b5050604080513381526001600160a01b0387811660208301528916818301526060810185905290517f9a06175b960d2874575c5001db984a61e4ee5d9a6db26e152a9de72d6a317d8e9350908190036080019150a150505050505050565b60006126056040840160208501614862565b6126156060850160408601614862565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee9190614be2565b90506126f986613fdd565b61271b61270c6080890160608a01614fab565b8860a001358960c00135614222565b61274361272e6040890160208a01614862565b61273e60608a0160408b01614862565b614291565b604080518082019091526000808252602082015261276a878960a001358a60c00135613fa8565b602083015281526040805160e081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f391606e90806127b88c80614fc8565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506020908101906128029060408e01908e01614862565b6001600160a01b0316815260200161282060608d0160408e01614862565b6001600160a01b03908116825230602080840191909152865160408401528601516060830152609954166080909101526128626101408c016101208d01614fab565b6040518363ffffffff1660e01b815260040161287f929190615011565b6020604051808303816000875af115801561289e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c29190614bc5565b95508590506128e06128da60a08a0160808b01614862565b87614300565b60006128f46101608a016101408b01614862565b6001600160a01b03161461291d5761291d866129186101608b016101408c01614862565b6140f7565b6099546001600160a01b031663ded2df71348861293d60e08d018d6150eb565b61294b6101008f018f6150eb565b6040518763ffffffff1660e01b815260040161296b959493929190615131565b6000604051808303818588803b15801561298457600080fd5b505af1158015612998573d6000803e3d6000fd5b50505050506129cb33308a60a001358b60200160208101906129ba9190614862565b6001600160a01b0316929190614415565b6129e5333060c08b01356129ba60608d0160408e01614862565b6129f56040890160208a01614862565b6001600160a01b031663095ea7b3878a60a001356040518363ffffffff1660e01b8152600401612a26929190614e00565b6020604051808303816000875af1158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a699190614e27565b50612a7a6060890160408a01614862565b6001600160a01b031663095ea7b3878a60c001356040518363ffffffff1660e01b8152600401612aab929190614e00565b6020604051808303816000875af1158015612aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aee9190614e27565b50604051630d6e663160e01b81523060048201526001600160a01b03821690630d6e663190602401600060405180830381600087803b158015612b3057600080fd5b505af1158015612b44573d6000803e3d6000fd5b50506040516394bf804d60e01b8152600481018a90523060248201526001600160a01b03841692506394bf804d915060440160408051808303816000875af1158015612b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb89190614e44565b507fd78ce241ef5794ab1864a13f548169c9ffc03abda8ed1064065fa81c340c91799050612bec60a08a0160808b01614862565b604080516001600160a01b03928316815291891660208301520160405180910390a1506040516370a0823160e01b815230600482015260009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015612c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7c9190614be2565b612c869190614de9565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015612cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf69190614be2565b612d009190614de9565b90508115612d7b5760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90612d369033908690600401614e00565b6020604051808303816000875af1158015612d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d799190614e27565b505b8015612df45760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb90612daf9033908590600401614e00565b6020604051808303816000875af1158015612dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df29190614e27565b505b50505050505092915050565b826001600160a01b038116612e275760405162461bcd60e51b81526004016105a790614afa565b3360009081526097602090815260409182902080548351818402810184019094528084528793612e979390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b506040516386ac1cb960e01b81526001600160a01b038616906386ac1cb990612ec690879087906004016151c0565b600060405180830381600087803b158015612ee057600080fd5b505af1158015612ef4573d6000803e3d6000fd5b505050507f3c97f149136cfbb978755d7cac071dcf9e7bbf5fde8a030fa2d972d78644441c338286866040516106b894939291906151d4565b600054610100900460ff1615808015612f4d5750600054600160ff909116105b80612f675750303b158015612f67575060005460ff166001145b612fca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105a7565b6000805460ff191660011790558015612fed576000805461ff0019166101001790555b609954612710600160a01b90910461ffff161061304c5760405162461bcd60e51b815260206004820152601d60248201527f50414c4d5465726d733a20656d6f6c756d656e74203e3d20313030252e00000060448201526064016105a7565b613055856141d0565b609880546001600160a01b038087166001600160a01b0319928316179092556099805461ffff8716600160a01b0261ffff60a01b19909116179055609a80549285169290911691909117905580156130e3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016106b8565b5050505050565b6130f261409d565b60995461ffff600160a01b9091048116908216106131645760405162461bcd60e51b815260206004820152602960248201527f50414c4d5465726d733a206e657720656d6f6c756d656e74203e3d206f6c6420604482015268195b5bdb1d5b595b9d60ba1b60648201526084016105a7565b6099805461ffff838116600160a01b81810261ffff60a01b198516179094556040805194909304909116835260208301527f7179ea06c1633dd908ac95e2c4749f1063eadecbe01501941080e07bb96764db910160405180910390a150565b6131cb61409d565b806001600160a01b0381166131f25760405162461bcd60e51b81526004016105a790614afa565b6098546001600160a01b0380841691160361324f5760405162461bcd60e51b815260206004820181905260248201527f50414c4d5465726d733a20616c7265616479207465726d20747265617375727960448201526064016105a7565b609880546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527fdaecbed9cdf338cbedbd120eefc62bec9856ad3657ea396258b681e6bc17bed59101611bf2565b826001600160a01b0381166132cd5760405162461bcd60e51b81526004016105a790614afa565b336000908152609760209081526040918290208054835181840281018401909452808452879361333d9390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b506040516392e49dfd60e01b81526001600160a01b038616906392e49dfd9061336c9087908790600401614b7a565b600060405180830381600087803b15801561338657600080fd5b505af115801561339a573d6000803e3d6000fd5b505050507f56c591ad091ad6159d554662a44cdfbd66dcf88173aa8809686c226e560c7948338286866040516106b89493929190614b8e565b6133db61409d565b806001600160a01b0381166134025760405162461bcd60e51b81526004016105a790614afa565b6099546001600160a01b03908116908316036134605760405162461bcd60e51b815260206004820152601a60248201527f50414c4d5465726d733a20616c7265616479206d616e6167657200000000000060448201526064016105a7565b609980546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f8d235c6c97ff1b07a41b6b8ac6ea040a6a6b411b20a0f02f02946fa45590bcfc9101611bf2565b826001600160a01b0381166134de5760405162461bcd60e51b81526004016105a790614afa565b336000908152609760209081526040918290208054835181840281018401909452808452879361354e9390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b5060405163012c590560e61b81526001600160a01b03861690634b1641409061357d9087908790600401614b7a565b600060405180830381600087803b15801561359757600080fd5b505af11580156135ab573d6000803e3d6000fd5b505050507fa51d837555a436e00533e1177576e060e79c5cf3196bd2809db7ed4b6c771947338286866040516106b89493929190614b8e565b6135f16020830183614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561362e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136529190614bc5565b61365f6020840184614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561369c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c09190614bc5565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b9190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137999190614be2565b90506137a485613fdd565b6137c66137b76040880160208901614fab565b87604001358860600135614222565b33600090815260976020908152604091829020805483518184028101840190945280845261383a939283018282801561120a576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111ec575061121e9350505060208a01905089614862565b5060008061386161384e60208a018a614862565b609a5430906001600160a01b0316613db7565b5090925090506138df333060408b013561387e60208d018d614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba9190614bc5565b613933333060608b01356138f660208d018d614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138bb573d6000803e3d6000fd5b6139406020890189614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561397d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a19190614bc5565b6001600160a01b031663095ea7b36139bc60208b018b614862565b6139ca8560408d0135614f02565b6040518363ffffffff1660e01b81526004016139e7929190614e00565b6020604051808303816000875af1158015613a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2a9190614e27565b50613a386020890189614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a999190614bc5565b6001600160a01b031663095ea7b3613ab460208b018b614862565b613ac28460608d0135614f02565b6040518363ffffffff1660e01b8152600401613adf929190614e00565b6020604051808303816000875af1158015613afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b229190614e27565b506040805180820190915260008082526020820152613b5788613b498560408d0135614f02565b610cc28560608e0135614f02565b602080840191909152908252613b6f908a018a614862565b81516020830151604051633f7b613560e01b8152600481019290925260248201526001600160a01b039190911690633f7b613590604401600060405180830381600087803b158015613bc057600080fd5b505af1158015613bd4573d6000803e3d6000fd5b50613be89350505060208a01905089614862565b6040516394bf804d60e01b8152600481018990523060248201526001600160a01b0391909116906394bf804d9060440160408051808303816000875af1158015613c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5a9190614e44565b507fd8604e87f6aa7aa2a3261108ed89a3ca0b8c8e08803677ccad6c16c9d48a7d03905033613c8c60208b018b614862565b604080516001600160a01b0393841681529290911660208301520160405180910390a150506040516370a0823160e01b815230600482015260009083906001600160a01b038716906370a08231906024016117c9565b613cea61409d565b6001600160a01b038116613d4f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a7565b613d58816141d0565b50565b600080613d68848461444d565b9250905080613db05760405162461bcd60e51b81526020600482015260146024820152732820a626aa32b936b99d103737ba1037bbb732b960611b60448201526064016105a7565b5092915050565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918291908716906370a0823190602401602060405180830381865afa158015613e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e299190614be2565b6040516330c3f3f760e21b8152600481018290526001600160a01b03888116602483015291925060009186169063c30fcfdc90604401600060405180830381865afa158015613e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ea49190810190615213565b60405163f4effe4160e01b81529091506001600160a01b0388169063f4effe4190613ed790849086908b90600401615338565b60408051808303816000875af1158015613ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f199190614e44565b9098909750919550909350505050565b6000612710613f3c61ffff8416856153c7565b613f4691906153e6565b9392505050565b613fa38363a9059cbb60e01b8484604051602401613f6c929190614e00565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526144b5565b505050565b600080613fbe84670de0b6b3a764000087614587565b9150613fd383670de0b6b3a764000087614587565b9050935093915050565b60008111613d585760405162461bcd60e51b815260206004820152601b60248201527f50414c4d5465726d733a206d696e74416d6f756e74207a65726f2e000000000060448201526064016105a7565b6001600160a01b0383161561408d57336001600160a01b03841614613fa35760405162461bcd60e51b815260206004820152601660248201527550414c4d5465726d733a206e6f2064656c656761746560501b60448201526064016105a7565b6140978282613d5b565b50505050565b6033546001600160a01b031633146122895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a7565b6001600160a01b038281166000908152609b60205260409020548183169116036141635760405162461bcd60e51b815260206004820152601b60248201527f50414c4d5465726d733a20616c72656164792064656c6567617465000000000060448201526064016105a7565b6001600160a01b038281166000818152609b602090815260409182902080546001600160a01b03191694861694851790558151338152908101929092528101919091527f1bdc0199979c7643aefd2462992328b03f70259b45fa89814e0d1008c105d06d90606001611bf2565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b826142305760008111614235565b600082115b613fa35760405162461bcd60e51b815260206004820152602760248201527f50414c4d5465726d733a206e6f2070726f6a65637420746f6b656e20616c6c6f60448201526631b0ba34b7b71760c91b60648201526084016105a7565b806001600160a01b0316826001600160a01b0316106142fc5760405162461bcd60e51b815260206004820152602160248201527f50414c4d5465726d733a20746f6b656e73206f7264657220696e7665727465646044820152601760f91b60648201526084016105a7565b5050565b6001600160a01b0382166000908152609760205260408120905b81548110156143ac57826001600160a01b031682828154811061433f5761433f614eec565b6000918252602090912001546001600160a01b03160361439a5760405162461bcd60e51b81526020600482015260166024820152751410531355195c9b5cce881d985d5b1d08195e1a5cdd60521b60448201526064016105a7565b806143a481614f1a565b91505061431a565b508054600181018255600082815260209081902090910180546001600160a01b0319166001600160a01b03858116918217909255604080519287168352928201527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f69539101611cbf565b6040516001600160a01b03808516602483015283166044820152606481018290526140979085906323b872dd60e01b90608401613f6c565b6000805b83518110156144a757826001600160a01b031684828151811061447657614476614eec565b60200260200101516001600160a01b03160361449557600191506144ae565b8061449f81614f1a565b915050614451565b5060009050805b9250929050565b600061450a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146349092919063ffffffff16565b805190915015613fa357808060200190518101906145289190614e27565b613fa35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105a7565b60008080600019858709858702925082811083820303915050806000036145c057600084116145b557600080fd5b508290049050613f46565b8084116145cc57600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6060614643848460008561464b565b949350505050565b6060824710156146ac5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105a7565b6001600160a01b0385163b6147035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a7565b600080866001600160a01b0316858760405161471f9190615408565b60006040518083038185875af1925050503d806000811461475c576040519150601f19603f3d011682016040523d82523d6000602084013e614761565b606091505b509150915061477182828661477c565b979650505050505050565b6060831561478b575081613f46565b82511561479b5782518084602001fd5b8160405162461bcd60e51b81526004016105a79190615424565b6001600160a01b0381168114613d5857600080fd5b60008083601f8401126147dc57600080fd5b5081356001600160401b038111156147f357600080fd5b6020830191508360208260051b85010111156144ae57600080fd5b60008060006040848603121561482357600080fd5b833561482e816147b5565b925060208401356001600160401b0381111561484957600080fd5b614855868287016147ca565b9497909650939450505050565b60006020828403121561487457600080fd5b8135613f46816147b5565b60006080828403121561489157600080fd5b50919050565b60008060a083850312156148aa57600080fd5b6148b4848461487f565b946080939093013593505050565b60008083601f8401126148d457600080fd5b5081356001600160401b038111156148eb57600080fd5b6020830191508360208285010111156144ae57600080fd5b60008060006040848603121561491857600080fd5b8335614923816147b5565b925060208401356001600160401b0381111561493e57600080fd5b614855868287016148c2565b6000806040838503121561495d57600080fd5b8235614968816147b5565b91506020830135614978816147b5565b809150509250929050565b6000806000806080858703121561499957600080fd5b84356149a4816147b5565b935060208501356149b4816147b5565b925060408501356149c4816147b5565b915060608501356149d4816147b5565b939692955090935050565b600080604083850312156149f257600080fd5b82356149fd816147b5565b946020939093013593505050565b600080600060608486031215614a2057600080fd5b8335614a2b816147b5565b9250602084013591506040840135614a42816147b5565b809150509250925092565b60008060408385031215614a6057600080fd5b82356001600160401b03811115614a7657600080fd5b830161016081860312156149fd57600080fd5b803561ffff81168114614a9b57600080fd5b919050565b60008060008060808587031215614ab657600080fd5b8435614ac1816147b5565b93506020850135614ad1816147b5565b92506149c460408601614a89565b600060208284031215614af157600080fd5b613f4682614a89565b60208082526017908201527f50414c4d5465726d733a2061646472657373205a65726f000000000000000000604082015260600190565b8183526000602080850194508260005b85811015614b6f578135614b54816147b5565b6001600160a01b031687529582019590820190600101614b41565b509495945050505050565b602081526000614643602083018486614b31565b6001600160a01b03858116825284166020820152606060408201819052600090614bbb9083018486614b31565b9695505050505050565b600060208284031215614bd757600080fd5b8151613f46816147b5565b600060208284031215614bf457600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715614c3357614c33614bfb565b60405290565b604080519081016001600160401b0381118282101715614c3357614c33614bfb565b604051606081016001600160401b0381118282101715614c3357614c33614bfb565b604051601f8201601f191681016001600160401b0381118282101715614ca557614ca5614bfb565b604052919050565b60005b83811015614cc8578181015183820152602001614cb0565b838111156140975750506000910152565b600082601f830112614cea57600080fd5b81516001600160401b03811115614d0357614d03614bfb565b614d16601f8201601f1916602001614c7d565b818152846020838601011115614d2b57600080fd5b614643826020830160208701614cad565b600060208284031215614d4e57600080fd5b81516001600160401b0380821115614d6557600080fd5b9083019060a08286031215614d7957600080fd5b614d81614c11565b8251815260208301516020820152604083015182811115614da157600080fd5b614dad87828601614cd9565b604083015250606083015160608201526080830151608082015280935050505092915050565b634e487b7160e01b600052601160045260246000fd5b600082821015614dfb57614dfb614dd3565b500390565b6001600160a01b03929092168252602082015260400190565b8015158114613d5857600080fd5b600060208284031215614e3957600080fd5b8151613f4681614e19565b60008060408385031215614e5757600080fd5b505080516020909101519092909150565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201819052600090614eb69083018486614e68565b95945050505050565b6001600160a01b03858116825284166020820152606060408201819052600090614bbb9083018486614e68565b634e487b7160e01b600052603260045260246000fd5b60008219821115614f1557614f15614dd3565b500190565b600060018201614f2c57614f2c614dd3565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600080600080600060a08688031215614f6157600080fd5b855194506020860151935060408601516001600160401b03811115614f8557600080fd5b614f9188828901614cd9565b606088015160809098015196999598509695949350505050565b600060208284031215614fbd57600080fd5b8135613f4681614e19565b6000808335601e19843603018112614fdf57600080fd5b8301803591506001600160401b03821115614ff957600080fd5b6020019150600581901b36038213156144ae57600080fd5b6040815260006101208201845160e060408501528181518084526101408601915060209350838301925060005b8181101561505f57835162ffffff168352928401929184019160010161503e565b5050868301516001600160a01b0381166060870152915060408701516001600160a01b0381166080870152915060608701516001600160a01b03811660a08701529150608087015160c086015260a087015160e086015260c087015191506150d36101008601836001600160a01b03169052565b8515158386015292506150e39050565b509392505050565b6000808335601e1984360301811261510257600080fd5b8301803591506001600160401b0382111561511c57600080fd5b6020019150368190038213156144ae57600080fd5b6001600160a01b03861681526060602082018190526000906151569083018688614e68565b8281036040840152615169818587614e68565b98975050505050505050565b62ffffff81168114613d5857600080fd5b8183526000602080850194508260005b85811015614b6f5781356151a981615175565b62ffffff1687529582019590820190600101615196565b602081526000614643602083018486615186565b6001600160a01b03858116825284166020820152606060408201819052600090614bbb9083018486615186565b8051600281900b8114614a9b57600080fd5b6000602080838503121561522657600080fd5b82516001600160401b038082111561523d57600080fd5b818501915085601f83011261525157600080fd5b81518181111561526357615263614bfb565b615271848260051b01614c7d565b818152848101925060079190911b83018401908782111561529157600080fd5b928401925b818410156147715783880360808112156152b05760008081fd5b6152b8614c39565b85516001600160801b03811681146152d05760008081fd5b81526060601f1983018113156152e65760008081fd5b6152ee614c5b565b92506152fb888801615201565b8352604061530a818901615201565b848a0152908701519061531c82615175565b8301528087019190915283526080939093019291840191615296565b6060808252845182820181905260009190608090818501906020808a01865b838110156153a657815180516001600160801b031686528301518051600290810b8588015281850151900b604080880191909152015162ffffff16878601529385019390820190600101615357565b50508601889052506001600160a01b03861660408601529250614643915050565b60008160001904831182151516156153e1576153e1614dd3565b500290565b60008261540357634e487b7160e01b600052601260045260246000fd5b500490565b6000825161541a818460208701614cad565b9190910192915050565b6020815260008251806020840152615443816040850160208701614cad565b601f01601f1916919091016040019291505056fea26469706673582212201aefce900ecf4a74aab87ccb76f66ce500fdaea4ff9d899722249910f9aa691b64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80637bbfc69e116100ec578063bfd7e7521161008a578063ea6b186c11610064578063ea6b186c14610500578063eaaa929914610520578063f2cb118a14610540578063f2fde38b1461056057600080fd5b8063bfd7e752146104a0578063c28d4647146104c0578063d0ebdbe7146104e057600080fd5b8063ac484c55116100c6578063ac484c551461042d578063ae5e24c214610440578063b1ffa58214610460578063b33d46dc1461048057600080fd5b80637bbfc69e146103cf57806386de1467146103ef5780638da5cb5b1461040f57600080fd5b80633ce3b0d2116101595780635c873849116101335780635c8738491461035a57806368b6702e1461037a578063715018a61461039a5780637407e38c146103af57600080fd5b80633ce3b0d2146102e4578063481c6a751461031a5780634e543b261461033a57600080fd5b806326c1a7b11161019557806326c1a7b11461023b578063330807a914610270578063332d28ef146102a45780633a91f42a146102c457600080fd5b806304f3bcec146101bc57806319549dc6146101f957806319e050d01461021b575b600080fd5b3480156101c857600080fd5b50609a546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b5061021961021436600461480e565b610580565b005b34801561022757600080fd5b50610219610236366004614862565b6106c7565b34801561024757600080fd5b5060995461025d90600160a01b900461ffff1681565b60405161ffff90911681526020016101f0565b34801561027c57600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b057600080fd5b506102196102bf366004614897565b610fe8565b3480156102d057600080fd5b506102196102df366004614903565b61198b565b3480156102f057600080fd5b506101dc6102ff366004614862565b609b602052600090815260409020546001600160a01b031681565b34801561032657600080fd5b506099546101dc906001600160a01b031681565b34801561034657600080fd5b50610219610355366004614862565b611b13565b34801561036657600080fd5b5061021961037536600461494a565b611bfe565b34801561038657600080fd5b50610219610395366004614983565b611ccc565b3480156103a657600080fd5b50610219612277565b3480156103bb57600080fd5b506102196103ca366004614903565b61228b565b3480156103db57600080fd5b506101dc6103ea3660046149df565b6123e2565b3480156103fb57600080fd5b5061021961040a366004614a0b565b61241a565b34801561041b57600080fd5b506033546001600160a01b03166101dc565b6101dc61043b366004614a4d565b6125f3565b34801561044c57600080fd5b5061021961045b36600461480e565b612e00565b34801561046c57600080fd5b5061021961047b366004614aa0565b612f2d565b34801561048c57600080fd5b5061021961049b366004614adf565b6130ea565b3480156104ac57600080fd5b506102196104bb366004614862565b6131c3565b3480156104cc57600080fd5b506102196104db36600461480e565b6132a6565b3480156104ec57600080fd5b506102196104fb366004614862565b6133d3565b34801561050c57600080fd5b506098546101dc906001600160a01b031681565b34801561052c57600080fd5b5061021961053b36600461480e565b6134b7565b34801561054c57600080fd5b5061021961055b366004614897565b6135e4565b34801561056c57600080fd5b5061021961057b366004614862565b613ce2565b826001600160a01b0381166105b05760405162461bcd60e51b81526004016105a790614afa565b60405180910390fd5b3360009081526097602090815260409182902080548351818402810184019094528084528793610622939092919083018282801561061757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105f9575b505050505082613d5b565b5060405163a5ff1dc760e01b81526001600160a01b0386169063a5ff1dc7906106519087908790600401614b7a565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b505050507fa5217cdb9444a5f916bdf40d5cd8f7cb42d2a5f877ea5945648259eae1a3e0d7338286866040516106b89493929190614b8e565b60405180910390a15050505050565b806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190614bc5565b816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190614bc5565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190614be2565b6099546040516390229af760e01b81526001600160a01b038881166004830152929350911690429082906390229af790602401600060405180830381865afa1580156108b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108dc9190810190614d3c565b608001511061092d5760405162461bcd60e51b815260206004820152601a60248201527f50414c4d5465726d733a207465726d206e6f7420656e6465642e00000000000060448201526064016105a7565b60995460405163019e050d60e41b81526001600160a01b038881166004830152909116906319e050d090602401600060405180830381600087803b15801561097457600080fd5b505af1158015610988573d6000803e3d6000fd5b5050609a546000925082915081906109ac908a9030906001600160a01b0316613db7565b92509250925060006109ce84609960149054906101000a900461ffff16613f29565b905060006109ec84609960149054906101000a900461ffff16613f29565b90508a6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190614bc5565b6001600160a01b031663095ea7b38c610a698589614de9565b6040518363ffffffff1660e01b8152600401610a86929190614e00565b6020604051808303816000875af1158015610aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac99190614e27565b508a6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c9190614bc5565b6001600160a01b031663095ea7b38c610b458488614de9565b6040518363ffffffff1660e01b8152600401610b62929190614e00565b6020604051808303816000875af1158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190614e27565b508115610c3857610c38609860009054906101000a90046001600160a01b0316838d6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c289190614bc5565b6001600160a01b03169190613f4d565b8015610c9657610c96609860009054906101000a90046001600160a01b0316828d6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b6040805180820190915260008082526020820152610cc784610cb88589614de9565b610cc28589614de9565b613fa8565b60208301819052818352604051633f7b613560e01b81526001600160a01b038f1692633f7b613592610d0492600401918252602082015260400190565b600060405180830381600087803b158015610d1e57600080fd5b505af1158015610d32573d6000803e3d6000fd5b50506040516394bf804d60e01b8152600481018790523060248201526001600160a01b038f1693506394bf804d9250604401905060408051808303816000875af1158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da89190614e44565b5050604080516001600160a01b038d168152602081018490529081018290527f59e2f591f61aa724c8984e092e32f4f83dcd07cbf01b88c0c79e8dd0adde82069060600160405180910390a150506040516370a0823160e01b8152306004820152600094508693506001600160a01b03891692506370a082319150602401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190614be2565b610e719190614de9565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190614be2565b610eeb9190614de9565b90508115610f665760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90610f219033908690600401614e00565b6020604051808303816000875af1158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190614e27565b505b8015610fdf5760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb90610f9a9033908590600401614e00565b6020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190614e27565b505b50505050505050565b610ff56020830183614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190614bc5565b6110636020840184614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c49190614bc5565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f9190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d9190614be2565b90506111a885613fdd565b336000908152609760209081526040918290208054835181840281018401909452808452611223939283018282801561120a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111ec575b5061121e9350505060208a01905089614862565b613d5b565b503060008061124b61123860208b018b614862565b609a5485906001600160a01b0316613db7565b5091509150818960200135106112b25760405162461bcd60e51b815260206004820152602660248201527f50414c4d5465726d733a2073656e64206261636b20616d6f756e7430203e206160448201526506d6f756e74360d41b60648201526084016105a7565b808960400135106113145760405162461bcd60e51b815260206004820152602660248201527f50414c4d5465726d733a2073656e64206261636b20616d6f756e7431203e20616044820152656d6f756e743160d01b60648201526084016105a7565b60006113348a60200135609960149054906101000a900461ffff16613f29565b905060006113568b60400135609960149054906101000a900461ffff16613f29565b9050600061136760208d018d614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190614bc5565b905060006113d960208e018e614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a9190614bc5565b9050831561145c5760985461145c906001600160a01b03848116911686613f4d565b821561147c5760985461147c906001600160a01b03838116911685613f4d565b6114b38d60600160208101906114929190614862565b858f602001356114a29190614de9565b6001600160a01b0385169190613f4d565b6114ea8d60600160208101906114c99190614862565b848f604001356114d99190614de9565b6001600160a01b0384169190613f4d565b816001600160a01b031663095ea7b38e600001602081019061150c9190614862565b8f602001358961151c9190614de9565b6040518363ffffffff1660e01b8152600401611539929190614e00565b6020604051808303816000875af1158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c9190614e27565b50806001600160a01b031663095ea7b38e600001602081019061159f9190614862565b8f60400135886115af9190614de9565b6040518363ffffffff1660e01b81526004016115cc929190614e00565b6020604051808303816000875af11580156115eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160f9190614e27565b5050506000806116398c8e60200135886116299190614de9565b8f6040013588610cc29190614de9565b909250905061164b60208e018e614862565b604051633f7b613560e01b815260048101849052602481018390526001600160a01b039190911690633f7b613590604401600060405180830381600087803b15801561169657600080fd5b505af11580156116aa573d6000803e3d6000fd5b506116c09450505060208e0191508d9050614862565b6040516394bf804d60e01b8152600481018c90526001600160a01b03878116602483015291909116906394bf804d9060440160408051808303816000875af1158015611710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117349190614e44565b507fc00aed996acfb0673742e8911b6ff20f93754b815a7540b7e761d7429ffa08ab90503361176660208e018e614862565b604080516001600160a01b03938416815292909116602083015281018490526060810183905260800160405180910390a150506040516370a0823160e01b8152306004820152600093508592506001600160a01b03881691506370a08231906024015b602060405180830381865afa1580156117e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a9190614be2565b6118149190614de9565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118849190614be2565b61188e9190614de9565b905081156119095760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906118c49033908690600401614e00565b6020604051808303816000875af11580156118e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119079190614e27565b505b8015610fdd5760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb9061193d9033908590600401614e00565b6020604051808303816000875af115801561195c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119809190614e27565b505050505050505050565b826001600160a01b0381166119b25760405162461bcd60e51b81526004016105a790614afa565b6001600160a01b038085166000908152609b6020908152604080832054338452609783529281902080548251818502810185019093528083528995611a37951693830182828015611a2c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a0e575b50505050508361402d565b60995460405163152f2bb760e01b81526001600160a01b039091169063152f2bb790611a6b90889088908890600401614e91565b600060405180830381600087803b158015611a8557600080fd5b505af1158015611a99573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b60205260409020547f01e616d15b59874215258e3e3646672746d2fafa2a88ab82d89c49991bcdbbe99116611ae45733611b00565b6001600160a01b038087166000908152609b6020526040902054165b8286866040516106b89493929190614ebf565b611b1b61409d565b806001600160a01b038116611b425760405162461bcd60e51b81526004016105a790614afa565b609a546001600160a01b03808416911603611b9f5760405162461bcd60e51b815260206004820152601b60248201527f50414c4d5465726d733a20616c7265616479207265736f6c766572000000000060448201526064016105a7565b609a80546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f6cb59c795917577ec693948e42535bd42e4c7784893c9fff6d7b7102f64a1d7291015b60405180910390a15050565b3360009081526097602090815260409182902080548351818402810184019094528084528593611c6e9390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b50611c7983836140f7565b604080513381526001600160a01b0380841660208301528416918101919091527f0bcba02da0cdd1a6aac8553dd2668cbc3dae93fab8859665ba2d470a2ba8f445906060015b60405180910390a1505050565b816001600160a01b038116611cf35760405162461bcd60e51b81526004016105a790614afa565b836001600160a01b038116611d1a5760405162461bcd60e51b81526004016105a790614afa565b33600090815260976020908152604080832080548251818502810185019093528083528a9493611d8b93929190830182828015611d8057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d62575b505050505083613d5b565b33600090815260976020526040902080549192509082908110611db057611db0614eec565b600091825260209091200180546001600160a01b0319169055805b33600090815260976020526040902054611de790600190614de9565b811015611e8c57336000908152609760205260409020611e08826001614f02565b81548110611e1857611e18614eec565b60009182526020808320909101543383526097909152604090912080546001600160a01b039092169183908110611e5157611e51614eec565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580611e8481614f1a565b915050611dcb565b50336000908152609760205260409020805480611eab57611eab614f33565b600082815260208120820160001990810180546001600160a01b0319169055909101909155609a548190611eeb908b9030906001600160a01b0316613db7565b50915091506000611f0c83609960149054906101000a900461ffff16613f29565b90506000611f2a83609960149054906101000a900461ffff16613f29565b90508115611f8a57611f8a609860009054906101000a90046001600160a01b0316838e6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b8015611fe857611fe8609860009054906101000a90046001600160a01b0316828e6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b831561203a5761203a8b611ffc8487614de9565b8e6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b821561208c5761208c8b61204e8386614de9565b8e6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c04573d6000803e3d6000fd5b60995460405163b7d3824360e01b81526001600160a01b0388811660048301528d811660248301529091169063b7d3824390604401600060405180830381600087803b1580156120db57600080fd5b505af11580156120ef573d6000803e3d6000fd5b505060405163d0ebdbe760e01b81526001600160a01b038c811660048301528f16925063d0ebdbe79150602401600060405180830381600087803b15801561213657600080fd5b505af115801561214a573d6000803e3d6000fd5b5050604051630d6e663160e01b8152600060048201526001600160a01b038f169250630d6e66319150602401600060405180830381600087803b15801561219057600080fd5b505af11580156121a4573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038d811660048301528f16925063f2fde38b9150602401600060405180830381600087803b1580156121eb57600080fd5b505af11580156121ff573d6000803e3d6000fd5b5050604080513381526001600160a01b038a81166020830152818301899052606082018890528f16608082015260a0810186905260c0810185905290517f0d52372e455cc3305a983c590d790ca4175987649a8e2959ed7dd506387961b993509081900360e0019150a1505050505050505050505050565b61227f61409d565b61228960006141d0565b565b826001600160a01b0381166122b25760405162461bcd60e51b81526004016105a790614afa565b6001600160a01b038085166000908152609b6020908152604080832054338452609783529281902080548251818502810185019093528083528995612335951693830182828015611a2c576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a0e5750505050508361402d565b609954604051631d01f8e360e21b81526001600160a01b0390911690637407e38c9061236990889088908890600401614e91565b600060405180830381600087803b15801561238357600080fd5b505af1158015612397573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b60205260409020547fdcd296d17559776406261383f6e29108f53a3ca0edf2041fa6a75335e59c18e69116611ae45733611b00565b609760205281600052604060002081815481106123fe57600080fd5b6000918252602090912001546001600160a01b03169150829050565b826001600160a01b0381166124415760405162461bcd60e51b81526004016105a790614afa565b609954604051632988bb9f60e21b81526001600160a01b03808716600483015286921690600090829063a622ee7c90602401600060405180830381865afa158015612490573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124b89190810190614f49565b505033600090815260976020908152604091829020805483518184028101840190945280845295965061252e95929450925083018282801561252357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612505575b505050505084613d5b565b506040516386de146760e01b81526001600160a01b0388811660048301526024820188905286811660448301528316906386de146790606401600060405180830381600087803b15801561258157600080fd5b505af1158015612595573d6000803e3d6000fd5b5050604080513381526001600160a01b0387811660208301528916818301526060810185905290517f9a06175b960d2874575c5001db984a61e4ee5d9a6db26e152a9de72d6a317d8e9350908190036080019150a150505050505050565b60006126056040840160208501614862565b6126156060850160408601614862565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee9190614be2565b90506126f986613fdd565b61271b61270c6080890160608a01614fab565b8860a001358960c00135614222565b61274361272e6040890160208a01614862565b61273e60608a0160408b01614862565b614291565b604080518082019091526000808252602082015261276a878960a001358a60c00135613fa8565b602083015281526040805160e081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f391606e90806127b88c80614fc8565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506020908101906128029060408e01908e01614862565b6001600160a01b0316815260200161282060608d0160408e01614862565b6001600160a01b03908116825230602080840191909152865160408401528601516060830152609954166080909101526128626101408c016101208d01614fab565b6040518363ffffffff1660e01b815260040161287f929190615011565b6020604051808303816000875af115801561289e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c29190614bc5565b95508590506128e06128da60a08a0160808b01614862565b87614300565b60006128f46101608a016101408b01614862565b6001600160a01b03161461291d5761291d866129186101608b016101408c01614862565b6140f7565b6099546001600160a01b031663ded2df71348861293d60e08d018d6150eb565b61294b6101008f018f6150eb565b6040518763ffffffff1660e01b815260040161296b959493929190615131565b6000604051808303818588803b15801561298457600080fd5b505af1158015612998573d6000803e3d6000fd5b50505050506129cb33308a60a001358b60200160208101906129ba9190614862565b6001600160a01b0316929190614415565b6129e5333060c08b01356129ba60608d0160408e01614862565b6129f56040890160208a01614862565b6001600160a01b031663095ea7b3878a60a001356040518363ffffffff1660e01b8152600401612a26929190614e00565b6020604051808303816000875af1158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a699190614e27565b50612a7a6060890160408a01614862565b6001600160a01b031663095ea7b3878a60c001356040518363ffffffff1660e01b8152600401612aab929190614e00565b6020604051808303816000875af1158015612aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aee9190614e27565b50604051630d6e663160e01b81523060048201526001600160a01b03821690630d6e663190602401600060405180830381600087803b158015612b3057600080fd5b505af1158015612b44573d6000803e3d6000fd5b50506040516394bf804d60e01b8152600481018a90523060248201526001600160a01b03841692506394bf804d915060440160408051808303816000875af1158015612b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb89190614e44565b507fd78ce241ef5794ab1864a13f548169c9ffc03abda8ed1064065fa81c340c91799050612bec60a08a0160808b01614862565b604080516001600160a01b03928316815291891660208301520160405180910390a1506040516370a0823160e01b815230600482015260009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015612c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7c9190614be2565b612c869190614de9565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a0823190602401602060405180830381865afa158015612cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf69190614be2565b612d009190614de9565b90508115612d7b5760405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90612d369033908690600401614e00565b6020604051808303816000875af1158015612d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d799190614e27565b505b8015612df45760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb90612daf9033908590600401614e00565b6020604051808303816000875af1158015612dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df29190614e27565b505b50505050505092915050565b826001600160a01b038116612e275760405162461bcd60e51b81526004016105a790614afa565b3360009081526097602090815260409182902080548351818402810184019094528084528793612e979390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b506040516386ac1cb960e01b81526001600160a01b038616906386ac1cb990612ec690879087906004016151c0565b600060405180830381600087803b158015612ee057600080fd5b505af1158015612ef4573d6000803e3d6000fd5b505050507f3c97f149136cfbb978755d7cac071dcf9e7bbf5fde8a030fa2d972d78644441c338286866040516106b894939291906151d4565b600054610100900460ff1615808015612f4d5750600054600160ff909116105b80612f675750303b158015612f67575060005460ff166001145b612fca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105a7565b6000805460ff191660011790558015612fed576000805461ff0019166101001790555b609954612710600160a01b90910461ffff161061304c5760405162461bcd60e51b815260206004820152601d60248201527f50414c4d5465726d733a20656d6f6c756d656e74203e3d20313030252e00000060448201526064016105a7565b613055856141d0565b609880546001600160a01b038087166001600160a01b0319928316179092556099805461ffff8716600160a01b0261ffff60a01b19909116179055609a80549285169290911691909117905580156130e3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016106b8565b5050505050565b6130f261409d565b60995461ffff600160a01b9091048116908216106131645760405162461bcd60e51b815260206004820152602960248201527f50414c4d5465726d733a206e657720656d6f6c756d656e74203e3d206f6c6420604482015268195b5bdb1d5b595b9d60ba1b60648201526084016105a7565b6099805461ffff838116600160a01b81810261ffff60a01b198516179094556040805194909304909116835260208301527f7179ea06c1633dd908ac95e2c4749f1063eadecbe01501941080e07bb96764db910160405180910390a150565b6131cb61409d565b806001600160a01b0381166131f25760405162461bcd60e51b81526004016105a790614afa565b6098546001600160a01b0380841691160361324f5760405162461bcd60e51b815260206004820181905260248201527f50414c4d5465726d733a20616c7265616479207465726d20747265617375727960448201526064016105a7565b609880546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527fdaecbed9cdf338cbedbd120eefc62bec9856ad3657ea396258b681e6bc17bed59101611bf2565b826001600160a01b0381166132cd5760405162461bcd60e51b81526004016105a790614afa565b336000908152609760209081526040918290208054835181840281018401909452808452879361333d9390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b506040516392e49dfd60e01b81526001600160a01b038616906392e49dfd9061336c9087908790600401614b7a565b600060405180830381600087803b15801561338657600080fd5b505af115801561339a573d6000803e3d6000fd5b505050507f56c591ad091ad6159d554662a44cdfbd66dcf88173aa8809686c226e560c7948338286866040516106b89493929190614b8e565b6133db61409d565b806001600160a01b0381166134025760405162461bcd60e51b81526004016105a790614afa565b6099546001600160a01b03908116908316036134605760405162461bcd60e51b815260206004820152601a60248201527f50414c4d5465726d733a20616c7265616479206d616e6167657200000000000060448201526064016105a7565b609980546001600160a01b031981166001600160a01b038581169182179093556040805193909216835260208301527f8d235c6c97ff1b07a41b6b8ac6ea040a6a6b411b20a0f02f02946fa45590bcfc9101611bf2565b826001600160a01b0381166134de5760405162461bcd60e51b81526004016105a790614afa565b336000908152609760209081526040918290208054835181840281018401909452808452879361354e9390929190830182828015610617576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116105f957505050505082613d5b565b5060405163012c590560e61b81526001600160a01b03861690634b1641409061357d9087908790600401614b7a565b600060405180830381600087803b15801561359757600080fd5b505af11580156135ab573d6000803e3d6000fd5b505050507fa51d837555a436e00533e1177576e060e79c5cf3196bd2809db7ed4b6c771947338286866040516106b89493929190614b8e565b6135f16020830183614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561362e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136529190614bc5565b61365f6020840184614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561369c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c09190614bc5565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b9190614be2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137999190614be2565b90506137a485613fdd565b6137c66137b76040880160208901614fab565b87604001358860600135614222565b33600090815260976020908152604091829020805483518184028101840190945280845261383a939283018282801561120a576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111ec575061121e9350505060208a01905089614862565b5060008061386161384e60208a018a614862565b609a5430906001600160a01b0316613db7565b5090925090506138df333060408b013561387e60208d018d614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba9190614bc5565b613933333060608b01356138f660208d018d614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138bb573d6000803e3d6000fd5b6139406020890189614862565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561397d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a19190614bc5565b6001600160a01b031663095ea7b36139bc60208b018b614862565b6139ca8560408d0135614f02565b6040518363ffffffff1660e01b81526004016139e7929190614e00565b6020604051808303816000875af1158015613a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2a9190614e27565b50613a386020890189614862565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a999190614bc5565b6001600160a01b031663095ea7b3613ab460208b018b614862565b613ac28460608d0135614f02565b6040518363ffffffff1660e01b8152600401613adf929190614e00565b6020604051808303816000875af1158015613afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b229190614e27565b506040805180820190915260008082526020820152613b5788613b498560408d0135614f02565b610cc28560608e0135614f02565b602080840191909152908252613b6f908a018a614862565b81516020830151604051633f7b613560e01b8152600481019290925260248201526001600160a01b039190911690633f7b613590604401600060405180830381600087803b158015613bc057600080fd5b505af1158015613bd4573d6000803e3d6000fd5b50613be89350505060208a01905089614862565b6040516394bf804d60e01b8152600481018990523060248201526001600160a01b0391909116906394bf804d9060440160408051808303816000875af1158015613c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5a9190614e44565b507fd8604e87f6aa7aa2a3261108ed89a3ca0b8c8e08803677ccad6c16c9d48a7d03905033613c8c60208b018b614862565b604080516001600160a01b0393841681529290911660208301520160405180910390a150506040516370a0823160e01b815230600482015260009083906001600160a01b038716906370a08231906024016117c9565b613cea61409d565b6001600160a01b038116613d4f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a7565b613d58816141d0565b50565b600080613d68848461444d565b9250905080613db05760405162461bcd60e51b81526020600482015260146024820152732820a626aa32b936b99d103737ba1037bbb732b960611b60448201526064016105a7565b5092915050565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918291908716906370a0823190602401602060405180830381865afa158015613e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e299190614be2565b6040516330c3f3f760e21b8152600481018290526001600160a01b03888116602483015291925060009186169063c30fcfdc90604401600060405180830381865afa158015613e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ea49190810190615213565b60405163f4effe4160e01b81529091506001600160a01b0388169063f4effe4190613ed790849086908b90600401615338565b60408051808303816000875af1158015613ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f199190614e44565b9098909750919550909350505050565b6000612710613f3c61ffff8416856153c7565b613f4691906153e6565b9392505050565b613fa38363a9059cbb60e01b8484604051602401613f6c929190614e00565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526144b5565b505050565b600080613fbe84670de0b6b3a764000087614587565b9150613fd383670de0b6b3a764000087614587565b9050935093915050565b60008111613d585760405162461bcd60e51b815260206004820152601b60248201527f50414c4d5465726d733a206d696e74416d6f756e74207a65726f2e000000000060448201526064016105a7565b6001600160a01b0383161561408d57336001600160a01b03841614613fa35760405162461bcd60e51b815260206004820152601660248201527550414c4d5465726d733a206e6f2064656c656761746560501b60448201526064016105a7565b6140978282613d5b565b50505050565b6033546001600160a01b031633146122895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a7565b6001600160a01b038281166000908152609b60205260409020548183169116036141635760405162461bcd60e51b815260206004820152601b60248201527f50414c4d5465726d733a20616c72656164792064656c6567617465000000000060448201526064016105a7565b6001600160a01b038281166000818152609b602090815260409182902080546001600160a01b03191694861694851790558151338152908101929092528101919091527f1bdc0199979c7643aefd2462992328b03f70259b45fa89814e0d1008c105d06d90606001611bf2565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b826142305760008111614235565b600082115b613fa35760405162461bcd60e51b815260206004820152602760248201527f50414c4d5465726d733a206e6f2070726f6a65637420746f6b656e20616c6c6f60448201526631b0ba34b7b71760c91b60648201526084016105a7565b806001600160a01b0316826001600160a01b0316106142fc5760405162461bcd60e51b815260206004820152602160248201527f50414c4d5465726d733a20746f6b656e73206f7264657220696e7665727465646044820152601760f91b60648201526084016105a7565b5050565b6001600160a01b0382166000908152609760205260408120905b81548110156143ac57826001600160a01b031682828154811061433f5761433f614eec565b6000918252602090912001546001600160a01b03160361439a5760405162461bcd60e51b81526020600482015260166024820152751410531355195c9b5cce881d985d5b1d08195e1a5cdd60521b60448201526064016105a7565b806143a481614f1a565b91505061431a565b508054600181018255600082815260209081902090910180546001600160a01b0319166001600160a01b03858116918217909255604080519287168352928201527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f69539101611cbf565b6040516001600160a01b03808516602483015283166044820152606481018290526140979085906323b872dd60e01b90608401613f6c565b6000805b83518110156144a757826001600160a01b031684828151811061447657614476614eec565b60200260200101516001600160a01b03160361449557600191506144ae565b8061449f81614f1a565b915050614451565b5060009050805b9250929050565b600061450a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146349092919063ffffffff16565b805190915015613fa357808060200190518101906145289190614e27565b613fa35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105a7565b60008080600019858709858702925082811083820303915050806000036145c057600084116145b557600080fd5b508290049050613f46565b8084116145cc57600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6060614643848460008561464b565b949350505050565b6060824710156146ac5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105a7565b6001600160a01b0385163b6147035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a7565b600080866001600160a01b0316858760405161471f9190615408565b60006040518083038185875af1925050503d806000811461475c576040519150601f19603f3d011682016040523d82523d6000602084013e614761565b606091505b509150915061477182828661477c565b979650505050505050565b6060831561478b575081613f46565b82511561479b5782518084602001fd5b8160405162461bcd60e51b81526004016105a79190615424565b6001600160a01b0381168114613d5857600080fd5b60008083601f8401126147dc57600080fd5b5081356001600160401b038111156147f357600080fd5b6020830191508360208260051b85010111156144ae57600080fd5b60008060006040848603121561482357600080fd5b833561482e816147b5565b925060208401356001600160401b0381111561484957600080fd5b614855868287016147ca565b9497909650939450505050565b60006020828403121561487457600080fd5b8135613f46816147b5565b60006080828403121561489157600080fd5b50919050565b60008060a083850312156148aa57600080fd5b6148b4848461487f565b946080939093013593505050565b60008083601f8401126148d457600080fd5b5081356001600160401b038111156148eb57600080fd5b6020830191508360208285010111156144ae57600080fd5b60008060006040848603121561491857600080fd5b8335614923816147b5565b925060208401356001600160401b0381111561493e57600080fd5b614855868287016148c2565b6000806040838503121561495d57600080fd5b8235614968816147b5565b91506020830135614978816147b5565b809150509250929050565b6000806000806080858703121561499957600080fd5b84356149a4816147b5565b935060208501356149b4816147b5565b925060408501356149c4816147b5565b915060608501356149d4816147b5565b939692955090935050565b600080604083850312156149f257600080fd5b82356149fd816147b5565b946020939093013593505050565b600080600060608486031215614a2057600080fd5b8335614a2b816147b5565b9250602084013591506040840135614a42816147b5565b809150509250925092565b60008060408385031215614a6057600080fd5b82356001600160401b03811115614a7657600080fd5b830161016081860312156149fd57600080fd5b803561ffff81168114614a9b57600080fd5b919050565b60008060008060808587031215614ab657600080fd5b8435614ac1816147b5565b93506020850135614ad1816147b5565b92506149c460408601614a89565b600060208284031215614af157600080fd5b613f4682614a89565b60208082526017908201527f50414c4d5465726d733a2061646472657373205a65726f000000000000000000604082015260600190565b8183526000602080850194508260005b85811015614b6f578135614b54816147b5565b6001600160a01b031687529582019590820190600101614b41565b509495945050505050565b602081526000614643602083018486614b31565b6001600160a01b03858116825284166020820152606060408201819052600090614bbb9083018486614b31565b9695505050505050565b600060208284031215614bd757600080fd5b8151613f46816147b5565b600060208284031215614bf457600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715614c3357614c33614bfb565b60405290565b604080519081016001600160401b0381118282101715614c3357614c33614bfb565b604051606081016001600160401b0381118282101715614c3357614c33614bfb565b604051601f8201601f191681016001600160401b0381118282101715614ca557614ca5614bfb565b604052919050565b60005b83811015614cc8578181015183820152602001614cb0565b838111156140975750506000910152565b600082601f830112614cea57600080fd5b81516001600160401b03811115614d0357614d03614bfb565b614d16601f8201601f1916602001614c7d565b818152846020838601011115614d2b57600080fd5b614643826020830160208701614cad565b600060208284031215614d4e57600080fd5b81516001600160401b0380821115614d6557600080fd5b9083019060a08286031215614d7957600080fd5b614d81614c11565b8251815260208301516020820152604083015182811115614da157600080fd5b614dad87828601614cd9565b604083015250606083015160608201526080830151608082015280935050505092915050565b634e487b7160e01b600052601160045260246000fd5b600082821015614dfb57614dfb614dd3565b500390565b6001600160a01b03929092168252602082015260400190565b8015158114613d5857600080fd5b600060208284031215614e3957600080fd5b8151613f4681614e19565b60008060408385031215614e5757600080fd5b505080516020909101519092909150565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201819052600090614eb69083018486614e68565b95945050505050565b6001600160a01b03858116825284166020820152606060408201819052600090614bbb9083018486614e68565b634e487b7160e01b600052603260045260246000fd5b60008219821115614f1557614f15614dd3565b500190565b600060018201614f2c57614f2c614dd3565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600080600080600060a08688031215614f6157600080fd5b855194506020860151935060408601516001600160401b03811115614f8557600080fd5b614f9188828901614cd9565b606088015160809098015196999598509695949350505050565b600060208284031215614fbd57600080fd5b8135613f4681614e19565b6000808335601e19843603018112614fdf57600080fd5b8301803591506001600160401b03821115614ff957600080fd5b6020019150600581901b36038213156144ae57600080fd5b6040815260006101208201845160e060408501528181518084526101408601915060209350838301925060005b8181101561505f57835162ffffff168352928401929184019160010161503e565b5050868301516001600160a01b0381166060870152915060408701516001600160a01b0381166080870152915060608701516001600160a01b03811660a08701529150608087015160c086015260a087015160e086015260c087015191506150d36101008601836001600160a01b03169052565b8515158386015292506150e39050565b509392505050565b6000808335601e1984360301811261510257600080fd5b8301803591506001600160401b0382111561511c57600080fd5b6020019150368190038213156144ae57600080fd5b6001600160a01b03861681526060602082018190526000906151569083018688614e68565b8281036040840152615169818587614e68565b98975050505050505050565b62ffffff81168114613d5857600080fd5b8183526000602080850194508260005b85811015614b6f5781356151a981615175565b62ffffff1687529582019590820190600101615196565b602081526000614643602083018486615186565b6001600160a01b03858116825284166020820152606060408201819052600090614bbb9083018486615186565b8051600281900b8114614a9b57600080fd5b6000602080838503121561522657600080fd5b82516001600160401b038082111561523d57600080fd5b818501915085601f83011261525157600080fd5b81518181111561526357615263614bfb565b615271848260051b01614c7d565b818152848101925060079190911b83018401908782111561529157600080fd5b928401925b818410156147715783880360808112156152b05760008081fd5b6152b8614c39565b85516001600160801b03811681146152d05760008081fd5b81526060601f1983018113156152e65760008081fd5b6152ee614c5b565b92506152fb888801615201565b8352604061530a818901615201565b848a0152908701519061531c82615175565b8301528087019190915283526080939093019291840191615296565b6060808252845182820181905260009190608090818501906020808a01865b838110156153a657815180516001600160801b031686528301518051600290810b8588015281850151900b604080880191909152015162ffffff16878601529385019390820190600101615357565b50508601889052506001600160a01b03861660408601529250614643915050565b60008160001904831182151516156153e1576153e1614dd3565b500290565b60008261540357634e487b7160e01b600052601260045260246000fd5b500490565b6000825161541a818460208701614cad565b9190910192915050565b6020815260008251806020840152615443816040850160208701614cad565b601f01601f1916919091016040019291505056fea26469706673582212201aefce900ecf4a74aab87ccb76f66ce500fdaea4ff9d899722249910f9aa691b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "openTerm((uint24[],address,address,bool,address,uint256,uint256,bytes,string,bool,address),uint256)": {
        "notice": "do all neccesary step to initialize market making."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 315,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 318,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 929,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 187,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 307,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 600,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 644,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8498,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "vaults",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8500,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "termTreasury",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 8502,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "manager",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 8504,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "emolument",
        "offset": 20,
        "slot": "153",
        "type": "t_uint16"
      },
      {
        "astId": 8507,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "resolver",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IArrakisV2Resolver)9860"
      },
      {
        "astId": 8511,
        "contract": "contracts/PALMTerms.sol:PALMTerms",
        "label": "delegateByVaults",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArrakisV2Resolver)9860": {
        "encoding": "inplace",
        "label": "contract IArrakisV2Resolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
